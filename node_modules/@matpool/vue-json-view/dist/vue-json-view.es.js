var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { defineComponent, toRefs, createVNode, mergeProps, inject, toRaw, reactive, onBeforeUnmount, createTextVNode, provide, computed } from "vue";
function toType(obj) {
  let type = getType(obj);
  if (type === "number") {
    if (isNaN(obj)) {
      type = "nan";
    } else if ((obj | 0) != obj) {
      type = "float";
    } else {
      type = "integer";
    }
  }
  return type;
}
function getType(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
}
const DEFAULT_COLOR = "#000000";
const CircleMinus = defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", mergeProps(getIconStyle(style2.value), {
      "viewBox": "0 0 24 24",
      "fill": "currentColor",
      "preserveAspectRatio": "xMidYMid meet"
    }), [createVNode("path", {
      "d": "M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7"
    }, null)])]);
  }
});
const CirclePlus = defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", mergeProps(getIconStyle(style2.value), {
      "viewBox": "0 0 24 24",
      "fill": "currentColor",
      "preserveAspectRatio": "xMidYMid meet"
    }), [createVNode("path", {
      "d": "M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z"
    }, null)])]);
  }
});
const SquareMinus = defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    const svgStyle = getIconStyle(style2.value).style;
    return createVNode("span", rest.value, [createVNode("svg", {
      "fill": svgStyle.color,
      "width": svgStyle.height,
      "height": svgStyle.width,
      "style": svgStyle,
      "viewBox": "0 0 1792 1792"
    }, [createVNode("path", {
      "d": "M1344 800v64q0 14-9 23t-23 9h-832q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h832q14 0 23 9t9 23zm128 448v-832q0-66-47-113t-113-47h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z"
    }, null)])]);
  }
});
const SquarePlus = defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    const svgStyle = getIconStyle(style2.value).style;
    return createVNode("span", rest.value, [createVNode("svg", {
      "fill": svgStyle.color,
      "width": svgStyle.height,
      "height": svgStyle.width,
      "style": svgStyle,
      "viewBox": "0 0 1792 1792"
    }, [createVNode("path", {
      "d": "M1344 800v64q0 14-9 23t-23 9h-352v352q0 14-9 23t-23 9h-64q-14 0-23-9t-9-23v-352h-352q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h352v-352q0-14 9-23t23-9h64q14 0 23 9t9 23v352h352q14 0 23 9t9 23zm128 448v-832q0-66-47-113t-113-47h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z"
    }, null)])]);
  }
});
const ArrowRight = defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", {
      "style": __spreadProps(__spreadValues({}, getIconStyle(style2.value).style), {
        paddingLeft: "2px",
        verticalAlign: "top"
      }),
      "viewBox": "0 0 15 15",
      "fill": "currentColor"
    }, [createVNode("path", {
      "d": "M0 14l6-6-6-6z"
    }, null)])]);
  }
});
const ArrowDown = defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", {
      "style": __spreadProps(__spreadValues({}, getIconStyle(style2.value).style), {
        paddingLeft: "2px",
        verticalAlign: "top"
      }),
      "viewBox": "0 0 15 15",
      "fill": "currentColor"
    }, [createVNode("path", {
      "d": "M0 5l6 6 6-6z"
    }, null)])]);
  }
});
const Clippy = defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", mergeProps(getIconStyle(style2.value), {
      "viewBox": "0 0 40 40",
      "fill": "currentColor",
      "preserveAspectRatio": "xMidYMid meet"
    }), [createVNode("g", null, [createVNode("path", {
      "d": "m30 35h-25v-22.5h25v7.5h2.5v-12.5c0-1.4-1.1-2.5-2.5-2.5h-7.5c0-2.8-2.2-5-5-5s-5 2.2-5 5h-7.5c-1.4 0-2.5 1.1-2.5 2.5v27.5c0 1.4 1.1 2.5 2.5 2.5h25c1.4 0 2.5-1.1 2.5-2.5v-5h-2.5v5z m-20-27.5h2.5s2.5-1.1 2.5-2.5 1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5 1.3 2.5 2.5 2.5h2.5s2.5 1.1 2.5 2.5h-20c0-1.5 1.1-2.5 2.5-2.5z m-2.5 20h5v-2.5h-5v2.5z m17.5-5v-5l-10 7.5 10 7.5v-5h12.5v-5h-12.5z m-17.5 10h7.5v-2.5h-7.5v2.5z m12.5-17.5h-12.5v2.5h12.5v-2.5z m-7.5 5h-5v2.5h5v-2.5z"
    }, null)])])]);
  }
});
defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", mergeProps(getIconStyle(style2.value), {
      "viewBox": "0 0 40 40",
      "fill": "currentColor",
      "preserveAspectRatio": "xMidYMid meet"
    }), [createVNode("g", null, [createVNode("path", {
      "d": "m28.6 25q0-0.5-0.4-1l-4-4 4-4q0.4-0.5 0.4-1 0-0.6-0.4-1.1l-2-2q-0.4-0.4-1-0.4-0.6 0-1 0.4l-4.1 4.1-4-4.1q-0.4-0.4-1-0.4-0.6 0-1 0.4l-2 2q-0.5 0.5-0.5 1.1 0 0.5 0.5 1l4 4-4 4q-0.5 0.5-0.5 1 0 0.7 0.5 1.1l2 2q0.4 0.4 1 0.4 0.6 0 1-0.4l4-4.1 4.1 4.1q0.4 0.4 1 0.4 0.6 0 1-0.4l2-2q0.4-0.4 0.4-1z m8.7-5q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z"
    }, null)])])]);
  }
});
defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", mergeProps(getIconStyle(style2.value), {
      "viewBox": "0 0 40 40",
      "fill": "currentColor",
      "preserveAspectRatio": "xMidYMid meet"
    }), [createVNode("g", null, [createVNode("path", {
      "d": "m30.1 21.4v-2.8q0-0.6-0.4-1t-1-0.5h-5.7v-5.7q0-0.6-0.4-1t-1-0.4h-2.9q-0.6 0-1 0.4t-0.4 1v5.7h-5.7q-0.6 0-1 0.5t-0.5 1v2.8q0 0.6 0.5 1t1 0.5h5.7v5.7q0 0.5 0.4 1t1 0.4h2.9q0.6 0 1-0.4t0.4-1v-5.7h5.7q0.6 0 1-0.5t0.4-1z m7.2-1.4q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z"
    }, null)])])]);
  }
});
defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", mergeProps(getIconStyle(style2.value), {
      "viewBox": "0 0 40 40",
      "fill": "currentColor",
      "preserveAspectRatio": "xMidYMid meet"
    }), [createVNode("g", null, [createVNode("path", {
      "d": "m31.6 21.6h-10v10h-3.2v-10h-10v-3.2h10v-10h3.2v10h10v3.2z"
    }, null)])])]);
  }
});
defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", mergeProps(getIconStyle(style2.value), {
      "viewBox": "0 0 40 40",
      "fill": "currentColor",
      "preserveAspectRatio": "xMidYMid meet"
    }), [createVNode("g", null, [createVNode("path", {
      "d": "m19.8 26.4l2.6-2.6-3.4-3.4-2.6 2.6v1.3h2.2v2.1h1.2z m9.8-16q-0.3-0.4-0.7 0l-7.8 7.8q-0.4 0.4 0 0.7t0.7 0l7.8-7.8q0.4-0.4 0-0.7z m1.8 13.2v4.3q0 2.6-1.9 4.5t-4.5 1.9h-18.6q-2.6 0-4.5-1.9t-1.9-4.5v-18.6q0-2.7 1.9-4.6t4.5-1.8h18.6q1.4 0 2.6 0.5 0.3 0.2 0.4 0.5 0.1 0.4-0.2 0.7l-1.1 1.1q-0.3 0.3-0.7 0.1-0.5-0.1-1-0.1h-18.6q-1.4 0-2.5 1.1t-1 2.5v18.6q0 1.4 1 2.5t2.5 1h18.6q1.5 0 2.5-1t1.1-2.5v-2.9q0-0.2 0.2-0.4l1.4-1.5q0.3-0.3 0.8-0.1t0.4 0.6z m-2.1-16.5l6.4 6.5-15 15h-6.4v-6.5z m9.9 3l-2.1 2-6.4-6.4 2.1-2q0.6-0.7 1.5-0.7t1.5 0.7l3.4 3.4q0.6 0.6 0.6 1.5t-0.6 1.5z"
    }, null)])])]);
  }
});
defineComponent({
  inheritAttrs: false,
  render() {
    const props = this.$attrs;
    const _a = toRefs(props), {
      style: style2
    } = _a, rest = __objRest(_a, [
      "style"
    ]);
    return createVNode("span", rest.value, [createVNode("svg", mergeProps(getIconStyle(style2.value), {
      "viewBox": "0 0 40 40",
      "fill": "currentColor",
      "preserveAspectRatio": "xMidYMid meet"
    }), [createVNode("g", null, [createVNode("path", {
      "d": "m31.7 16.4q0-0.6-0.4-1l-2.1-2.1q-0.4-0.4-1-0.4t-1 0.4l-9.1 9.1-5-5q-0.5-0.4-1-0.4t-1 0.4l-2.1 2q-0.4 0.4-0.4 1 0 0.6 0.4 1l8.1 8.1q0.4 0.4 1 0.4 0.6 0 1-0.4l12.2-12.1q0.4-0.4 0.4-1z m5.6 3.6q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z"
    }, null)])])]);
  }
});
function getIconStyle(style2) {
  if (!style2) {
    style2 = {};
  }
  return {
    style: __spreadProps(__spreadValues({
      verticalAlign: "middle"
    }, style2), {
      color: style2.color ? style2.color : DEFAULT_COLOR,
      height: "1em",
      width: "1em"
    })
  };
}
const rjv_default = {
  scheme: "rjv-default",
  author: "mac gainor",
  base00: "rgba(0, 0, 0, 0)",
  base01: "rgb(245, 245, 245)",
  base02: "rgb(235, 235, 235)",
  base03: "#93a1a1",
  base04: "rgba(0, 0, 0, 0.3)",
  base05: "#586e75",
  base06: "#073642",
  base07: "#002b36",
  base08: "#d33682",
  base09: "#cb4b16",
  base0A: "#dc322f",
  base0B: "#859900",
  base0C: "#6c71c4",
  base0D: "#586e75",
  base0E: "#2aa198",
  base0F: "#268bd2"
};
const rjv_grey = {
  scheme: "rjv-grey",
  author: "mac gainor",
  base00: "rgba(1, 1, 1, 0)",
  base01: "rgba(1, 1, 1, 0.1)",
  base02: "rgba(0, 0, 0, 0.2)",
  base03: "rgba(1, 1, 1, 0.3)",
  base04: "rgba(0, 0, 0, 0.4)",
  base05: "rgba(1, 1, 1, 0.5)",
  base06: "rgba(1, 1, 1, 0.6)",
  base07: "rgba(1, 1, 1, 0.7)",
  base08: "rgba(1, 1, 1, 0.8)",
  base09: "rgba(1, 1, 1, 0.8)",
  base0A: "rgba(1, 1, 1, 0.8)",
  base0B: "rgba(1, 1, 1, 0.8)",
  base0C: "rgba(1, 1, 1, 0.8)",
  base0D: "rgba(1, 1, 1, 0.8)",
  base0E: "rgba(1, 1, 1, 0.8)",
  base0F: "rgba(1, 1, 1, 0.8)"
};
var constants = {
  white: "#fff",
  black: "#000",
  transparent: "rgba(1, 1, 1, 0)",
  globalFontFamily: "monospace",
  globalCursor: "default",
  indentBlockWidth: "5px",
  braceFontWeight: "bold",
  braceCursor: "pointer",
  ellipsisFontSize: "18px",
  ellipsisLineHeight: "10px",
  ellipsisCursor: "pointer",
  keyMargin: "0px 5px",
  keyLetterSpacing: "0.5px",
  keyFontStyle: "none",
  keyBorderRadius: "3px",
  keyColonWeight: "bold",
  keyVerticalAlign: "top",
  keyOpacity: "0.85",
  keyOpacityHover: "1",
  keyValPaddingTop: "3px",
  keyValPaddingBottom: "3px",
  keyValPaddingRight: "5px",
  keyValBorderLeft: "1px solid",
  keyValBorderHover: "2px solid",
  keyValPaddingHover: "3px 5px 3px 4px",
  pushedContentMarginLeft: "6px",
  variableValuePaddingRight: "6px",
  nullFontSize: "11px",
  nullFontWeight: "bold",
  nullPadding: "1px 2px",
  nullBorderRadius: "3px",
  nanFontSize: "11px",
  nanFontWeight: "bold",
  nanPadding: "1px 2px",
  nanBorderRadius: "3px",
  undefinedFontSize: "11px",
  undefinedFontWeight: "bold",
  undefinedPadding: "1px 2px",
  undefinedBorderRadius: "3px",
  dataTypeFontSize: "11px",
  dataTypeMarginRight: "4px",
  datatypeOpacity: "0.8",
  objectSizeBorderRadius: "3px",
  objectSizeFontStyle: "italic",
  objectSizeMargin: "0px 6px 0px 0px",
  clipboardCursor: "pointer",
  clipboardCheckMarginLeft: "-12px",
  metaDataPadding: "0px 0px 0px 10px",
  arrayGroupMetaPadding: "0px 0px 0px 4px",
  iconContainerWidth: "17px",
  tooltipPadding: "4px",
  editInputMinWidth: "130px",
  editInputBorderRadius: "2px",
  editInputPadding: "5px",
  editInputMarginRight: "4px",
  editInputFontFamily: "monospace",
  iconCursor: "pointer",
  iconFontSize: "15px",
  iconPaddingRight: "1px",
  dateValueMarginLeft: "2px",
  iconMarginRight: "3px",
  detectedRowPaddingTop: "3px",
  addKeyCoverBackground: "rgba(255, 255, 255, 0.3)",
  addKeyCoverPosition: "absolute",
  addKeyCoverPositionPx: "0px",
  addKeyModalWidth: "200px",
  addKeyModalMargin: "auto",
  addKeyModalPadding: "10px",
  addKeyModalRadius: "3px"
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var a = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var lib = {};
var threezerotwofour = {
  scheme: "threezerotwofour",
  author: "jan t. sott (http://github.com/idleberg)",
  base00: "#090300",
  base01: "#3a3432",
  base02: "#4a4543",
  base03: "#5c5855",
  base04: "#807d7c",
  base05: "#a5a2a2",
  base06: "#d6d5d4",
  base07: "#f7f7f7",
  base08: "#db2d20",
  base09: "#e8bbd0",
  base0A: "#fded02",
  base0B: "#01a252",
  base0C: "#b5e4f4",
  base0D: "#01a0e4",
  base0E: "#a16a94",
  base0F: "#cdab53"
};
var apathy = {
  scheme: "apathy",
  author: "jannik siebert (https://github.com/janniks)",
  base00: "#031A16",
  base01: "#0B342D",
  base02: "#184E45",
  base03: "#2B685E",
  base04: "#5F9C92",
  base05: "#81B5AC",
  base06: "#A7CEC8",
  base07: "#D2E7E4",
  base08: "#3E9688",
  base09: "#3E7996",
  base0A: "#3E4C96",
  base0B: "#883E96",
  base0C: "#963E4C",
  base0D: "#96883E",
  base0E: "#4C963E",
  base0F: "#3E965B"
};
var ashes = {
  scheme: "ashes",
  author: "jannik siebert (https://github.com/janniks)",
  base00: "#1C2023",
  base01: "#393F45",
  base02: "#565E65",
  base03: "#747C84",
  base04: "#ADB3BA",
  base05: "#C7CCD1",
  base06: "#DFE2E5",
  base07: "#F3F4F5",
  base08: "#C7AE95",
  base09: "#C7C795",
  base0A: "#AEC795",
  base0B: "#95C7AE",
  base0C: "#95AEC7",
  base0D: "#AE95C7",
  base0E: "#C795AE",
  base0F: "#C79595"
};
var atelierDune = {
  scheme: "atelier dune",
  author: "bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/dune)",
  base00: "#20201d",
  base01: "#292824",
  base02: "#6e6b5e",
  base03: "#7d7a68",
  base04: "#999580",
  base05: "#a6a28c",
  base06: "#e8e4cf",
  base07: "#fefbec",
  base08: "#d73737",
  base09: "#b65611",
  base0A: "#cfb017",
  base0B: "#60ac39",
  base0C: "#1fad83",
  base0D: "#6684e1",
  base0E: "#b854d4",
  base0F: "#d43552"
};
var atelierForest = {
  scheme: "atelier forest",
  author: "bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest)",
  base00: "#1b1918",
  base01: "#2c2421",
  base02: "#68615e",
  base03: "#766e6b",
  base04: "#9c9491",
  base05: "#a8a19f",
  base06: "#e6e2e0",
  base07: "#f1efee",
  base08: "#f22c40",
  base09: "#df5320",
  base0A: "#d5911a",
  base0B: "#5ab738",
  base0C: "#00ad9c",
  base0D: "#407ee7",
  base0E: "#6666ea",
  base0F: "#c33ff3"
};
var atelierHeath = {
  scheme: "atelier heath",
  author: "bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/heath)",
  base00: "#1b181b",
  base01: "#292329",
  base02: "#695d69",
  base03: "#776977",
  base04: "#9e8f9e",
  base05: "#ab9bab",
  base06: "#d8cad8",
  base07: "#f7f3f7",
  base08: "#ca402b",
  base09: "#a65926",
  base0A: "#bb8a35",
  base0B: "#379a37",
  base0C: "#159393",
  base0D: "#516aec",
  base0E: "#7b59c0",
  base0F: "#cc33cc"
};
var atelierLakeside = {
  scheme: "atelier lakeside",
  author: "bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/lakeside/)",
  base00: "#161b1d",
  base01: "#1f292e",
  base02: "#516d7b",
  base03: "#5a7b8c",
  base04: "#7195a8",
  base05: "#7ea2b4",
  base06: "#c1e4f6",
  base07: "#ebf8ff",
  base08: "#d22d72",
  base09: "#935c25",
  base0A: "#8a8a0f",
  base0B: "#568c3b",
  base0C: "#2d8f6f",
  base0D: "#257fad",
  base0E: "#5d5db1",
  base0F: "#b72dd2"
};
var atelierSeaside = {
  scheme: "atelier seaside",
  author: "bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/seaside/)",
  base00: "#131513",
  base01: "#242924",
  base02: "#5e6e5e",
  base03: "#687d68",
  base04: "#809980",
  base05: "#8ca68c",
  base06: "#cfe8cf",
  base07: "#f0fff0",
  base08: "#e6193c",
  base09: "#87711d",
  base0A: "#c3c322",
  base0B: "#29a329",
  base0C: "#1999b3",
  base0D: "#3d62f5",
  base0E: "#ad2bee",
  base0F: "#e619c3"
};
var bespin = {
  scheme: "bespin",
  author: "jan t. sott",
  base00: "#28211c",
  base01: "#36312e",
  base02: "#5e5d5c",
  base03: "#666666",
  base04: "#797977",
  base05: "#8a8986",
  base06: "#9d9b97",
  base07: "#baae9e",
  base08: "#cf6a4c",
  base09: "#cf7d34",
  base0A: "#f9ee98",
  base0B: "#54be0d",
  base0C: "#afc4db",
  base0D: "#5ea6ea",
  base0E: "#9b859d",
  base0F: "#937121"
};
var brewer = {
  scheme: "brewer",
  author: "timoth\xE9e poisot (http://github.com/tpoisot)",
  base00: "#0c0d0e",
  base01: "#2e2f30",
  base02: "#515253",
  base03: "#737475",
  base04: "#959697",
  base05: "#b7b8b9",
  base06: "#dadbdc",
  base07: "#fcfdfe",
  base08: "#e31a1c",
  base09: "#e6550d",
  base0A: "#dca060",
  base0B: "#31a354",
  base0C: "#80b1d3",
  base0D: "#3182bd",
  base0E: "#756bb1",
  base0F: "#b15928"
};
var bright = {
  scheme: "bright",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#000000",
  base01: "#303030",
  base02: "#505050",
  base03: "#b0b0b0",
  base04: "#d0d0d0",
  base05: "#e0e0e0",
  base06: "#f5f5f5",
  base07: "#ffffff",
  base08: "#fb0120",
  base09: "#fc6d24",
  base0A: "#fda331",
  base0B: "#a1c659",
  base0C: "#76c7b7",
  base0D: "#6fb3d2",
  base0E: "#d381c3",
  base0F: "#be643c"
};
var chalk = {
  scheme: "chalk",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#151515",
  base01: "#202020",
  base02: "#303030",
  base03: "#505050",
  base04: "#b0b0b0",
  base05: "#d0d0d0",
  base06: "#e0e0e0",
  base07: "#f5f5f5",
  base08: "#fb9fb1",
  base09: "#eda987",
  base0A: "#ddb26f",
  base0B: "#acc267",
  base0C: "#12cfc0",
  base0D: "#6fc2ef",
  base0E: "#e1a3ee",
  base0F: "#deaf8f"
};
var codeschool = {
  scheme: "codeschool",
  author: "brettof86",
  base00: "#232c31",
  base01: "#1c3657",
  base02: "#2a343a",
  base03: "#3f4944",
  base04: "#84898c",
  base05: "#9ea7a6",
  base06: "#a7cfa3",
  base07: "#b5d8f6",
  base08: "#2a5491",
  base09: "#43820d",
  base0A: "#a03b1e",
  base0B: "#237986",
  base0C: "#b02f30",
  base0D: "#484d79",
  base0E: "#c59820",
  base0F: "#c98344"
};
var colors = {
  scheme: "colors",
  author: "mrmrs (http://clrs.cc)",
  base00: "#111111",
  base01: "#333333",
  base02: "#555555",
  base03: "#777777",
  base04: "#999999",
  base05: "#bbbbbb",
  base06: "#dddddd",
  base07: "#ffffff",
  base08: "#ff4136",
  base09: "#ff851b",
  base0A: "#ffdc00",
  base0B: "#2ecc40",
  base0C: "#7fdbff",
  base0D: "#0074d9",
  base0E: "#b10dc9",
  base0F: "#85144b"
};
var _default = {
  scheme: "default",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#181818",
  base01: "#282828",
  base02: "#383838",
  base03: "#585858",
  base04: "#b8b8b8",
  base05: "#d8d8d8",
  base06: "#e8e8e8",
  base07: "#f8f8f8",
  base08: "#ab4642",
  base09: "#dc9656",
  base0A: "#f7ca88",
  base0B: "#a1b56c",
  base0C: "#86c1b9",
  base0D: "#7cafc2",
  base0E: "#ba8baf",
  base0F: "#a16946"
};
var eighties = {
  scheme: "eighties",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#2d2d2d",
  base01: "#393939",
  base02: "#515151",
  base03: "#747369",
  base04: "#a09f93",
  base05: "#d3d0c8",
  base06: "#e8e6df",
  base07: "#f2f0ec",
  base08: "#f2777a",
  base09: "#f99157",
  base0A: "#ffcc66",
  base0B: "#99cc99",
  base0C: "#66cccc",
  base0D: "#6699cc",
  base0E: "#cc99cc",
  base0F: "#d27b53"
};
var embers = {
  scheme: "embers",
  author: "jannik siebert (https://github.com/janniks)",
  base00: "#16130F",
  base01: "#2C2620",
  base02: "#433B32",
  base03: "#5A5047",
  base04: "#8A8075",
  base05: "#A39A90",
  base06: "#BEB6AE",
  base07: "#DBD6D1",
  base08: "#826D57",
  base09: "#828257",
  base0A: "#6D8257",
  base0B: "#57826D",
  base0C: "#576D82",
  base0D: "#6D5782",
  base0E: "#82576D",
  base0F: "#825757"
};
var flat = {
  scheme: "flat",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#2C3E50",
  base01: "#34495E",
  base02: "#7F8C8D",
  base03: "#95A5A6",
  base04: "#BDC3C7",
  base05: "#e0e0e0",
  base06: "#f5f5f5",
  base07: "#ECF0F1",
  base08: "#E74C3C",
  base09: "#E67E22",
  base0A: "#F1C40F",
  base0B: "#2ECC71",
  base0C: "#1ABC9C",
  base0D: "#3498DB",
  base0E: "#9B59B6",
  base0F: "#be643c"
};
var google = {
  scheme: "google",
  author: "seth wright (http://sethawright.com)",
  base00: "#1d1f21",
  base01: "#282a2e",
  base02: "#373b41",
  base03: "#969896",
  base04: "#b4b7b4",
  base05: "#c5c8c6",
  base06: "#e0e0e0",
  base07: "#ffffff",
  base08: "#CC342B",
  base09: "#F96A38",
  base0A: "#FBA922",
  base0B: "#198844",
  base0C: "#3971ED",
  base0D: "#3971ED",
  base0E: "#A36AC7",
  base0F: "#3971ED"
};
var grayscale = {
  scheme: "grayscale",
  author: "alexandre gavioli (https://github.com/alexx2/)",
  base00: "#101010",
  base01: "#252525",
  base02: "#464646",
  base03: "#525252",
  base04: "#ababab",
  base05: "#b9b9b9",
  base06: "#e3e3e3",
  base07: "#f7f7f7",
  base08: "#7c7c7c",
  base09: "#999999",
  base0A: "#a0a0a0",
  base0B: "#8e8e8e",
  base0C: "#868686",
  base0D: "#686868",
  base0E: "#747474",
  base0F: "#5e5e5e"
};
var greenscreen = {
  scheme: "green screen",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#001100",
  base01: "#003300",
  base02: "#005500",
  base03: "#007700",
  base04: "#009900",
  base05: "#00bb00",
  base06: "#00dd00",
  base07: "#00ff00",
  base08: "#007700",
  base09: "#009900",
  base0A: "#007700",
  base0B: "#00bb00",
  base0C: "#005500",
  base0D: "#009900",
  base0E: "#00bb00",
  base0F: "#005500"
};
var harmonic = {
  scheme: "harmonic16",
  author: "jannik siebert (https://github.com/janniks)",
  base00: "#0b1c2c",
  base01: "#223b54",
  base02: "#405c79",
  base03: "#627e99",
  base04: "#aabcce",
  base05: "#cbd6e2",
  base06: "#e5ebf1",
  base07: "#f7f9fb",
  base08: "#bf8b56",
  base09: "#bfbf56",
  base0A: "#8bbf56",
  base0B: "#56bf8b",
  base0C: "#568bbf",
  base0D: "#8b56bf",
  base0E: "#bf568b",
  base0F: "#bf5656"
};
var hopscotch = {
  scheme: "hopscotch",
  author: "jan t. sott",
  base00: "#322931",
  base01: "#433b42",
  base02: "#5c545b",
  base03: "#797379",
  base04: "#989498",
  base05: "#b9b5b8",
  base06: "#d5d3d5",
  base07: "#ffffff",
  base08: "#dd464c",
  base09: "#fd8b19",
  base0A: "#fdcc59",
  base0B: "#8fc13e",
  base0C: "#149b93",
  base0D: "#1290bf",
  base0E: "#c85e7c",
  base0F: "#b33508"
};
var isotope = {
  scheme: "isotope",
  author: "jan t. sott",
  base00: "#000000",
  base01: "#404040",
  base02: "#606060",
  base03: "#808080",
  base04: "#c0c0c0",
  base05: "#d0d0d0",
  base06: "#e0e0e0",
  base07: "#ffffff",
  base08: "#ff0000",
  base09: "#ff9900",
  base0A: "#ff0099",
  base0B: "#33ff00",
  base0C: "#00ffff",
  base0D: "#0066ff",
  base0E: "#cc00ff",
  base0F: "#3300ff"
};
var marrakesh = {
  scheme: "marrakesh",
  author: "alexandre gavioli (http://github.com/alexx2/)",
  base00: "#201602",
  base01: "#302e00",
  base02: "#5f5b17",
  base03: "#6c6823",
  base04: "#86813b",
  base05: "#948e48",
  base06: "#ccc37a",
  base07: "#faf0a5",
  base08: "#c35359",
  base09: "#b36144",
  base0A: "#a88339",
  base0B: "#18974e",
  base0C: "#75a738",
  base0D: "#477ca1",
  base0E: "#8868b3",
  base0F: "#b3588e"
};
var mocha = {
  scheme: "mocha",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#3B3228",
  base01: "#534636",
  base02: "#645240",
  base03: "#7e705a",
  base04: "#b8afad",
  base05: "#d0c8c6",
  base06: "#e9e1dd",
  base07: "#f5eeeb",
  base08: "#cb6077",
  base09: "#d28b71",
  base0A: "#f4bc87",
  base0B: "#beb55b",
  base0C: "#7bbda4",
  base0D: "#8ab3b5",
  base0E: "#a89bb9",
  base0F: "#bb9584"
};
var monokai = {
  scheme: "monokai",
  author: "wimer hazenberg (http://www.monokai.nl)",
  base00: "#272822",
  base01: "#383830",
  base02: "#49483e",
  base03: "#75715e",
  base04: "#a59f85",
  base05: "#f8f8f2",
  base06: "#f5f4f1",
  base07: "#f9f8f5",
  base08: "#f92672",
  base09: "#fd971f",
  base0A: "#f4bf75",
  base0B: "#a6e22e",
  base0C: "#a1efe4",
  base0D: "#66d9ef",
  base0E: "#ae81ff",
  base0F: "#cc6633"
};
var ocean = {
  scheme: "ocean",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#2b303b",
  base01: "#343d46",
  base02: "#4f5b66",
  base03: "#65737e",
  base04: "#a7adba",
  base05: "#c0c5ce",
  base06: "#dfe1e8",
  base07: "#eff1f5",
  base08: "#bf616a",
  base09: "#d08770",
  base0A: "#ebcb8b",
  base0B: "#a3be8c",
  base0C: "#96b5b4",
  base0D: "#8fa1b3",
  base0E: "#b48ead",
  base0F: "#ab7967"
};
var paraiso = {
  scheme: "paraiso",
  author: "jan t. sott",
  base00: "#2f1e2e",
  base01: "#41323f",
  base02: "#4f424c",
  base03: "#776e71",
  base04: "#8d8687",
  base05: "#a39e9b",
  base06: "#b9b6b0",
  base07: "#e7e9db",
  base08: "#ef6155",
  base09: "#f99b15",
  base0A: "#fec418",
  base0B: "#48b685",
  base0C: "#5bc4bf",
  base0D: "#06b6ef",
  base0E: "#815ba4",
  base0F: "#e96ba8"
};
var pop = {
  scheme: "pop",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#000000",
  base01: "#202020",
  base02: "#303030",
  base03: "#505050",
  base04: "#b0b0b0",
  base05: "#d0d0d0",
  base06: "#e0e0e0",
  base07: "#ffffff",
  base08: "#eb008a",
  base09: "#f29333",
  base0A: "#f8ca12",
  base0B: "#37b349",
  base0C: "#00aabb",
  base0D: "#0e5a94",
  base0E: "#b31e8d",
  base0F: "#7a2d00"
};
var railscasts = {
  scheme: "railscasts",
  author: "ryan bates (http://railscasts.com)",
  base00: "#2b2b2b",
  base01: "#272935",
  base02: "#3a4055",
  base03: "#5a647e",
  base04: "#d4cfc9",
  base05: "#e6e1dc",
  base06: "#f4f1ed",
  base07: "#f9f7f3",
  base08: "#da4939",
  base09: "#cc7833",
  base0A: "#ffc66d",
  base0B: "#a5c261",
  base0C: "#519f50",
  base0D: "#6d9cbe",
  base0E: "#b6b3eb",
  base0F: "#bc9458"
};
var shapeshifter = {
  scheme: "shapeshifter",
  author: "tyler benziger (http://tybenz.com)",
  base00: "#000000",
  base01: "#040404",
  base02: "#102015",
  base03: "#343434",
  base04: "#555555",
  base05: "#ababab",
  base06: "#e0e0e0",
  base07: "#f9f9f9",
  base08: "#e92f2f",
  base09: "#e09448",
  base0A: "#dddd13",
  base0B: "#0ed839",
  base0C: "#23edda",
  base0D: "#3b48e3",
  base0E: "#f996e2",
  base0F: "#69542d"
};
var solarized = {
  scheme: "solarized",
  author: "ethan schoonover (http://ethanschoonover.com/solarized)",
  base00: "#002b36",
  base01: "#073642",
  base02: "#586e75",
  base03: "#657b83",
  base04: "#839496",
  base05: "#93a1a1",
  base06: "#eee8d5",
  base07: "#fdf6e3",
  base08: "#dc322f",
  base09: "#cb4b16",
  base0A: "#b58900",
  base0B: "#859900",
  base0C: "#2aa198",
  base0D: "#268bd2",
  base0E: "#6c71c4",
  base0F: "#d33682"
};
var summerfruit = {
  scheme: "summerfruit",
  author: "christopher corley (http://cscorley.github.io/)",
  base00: "#151515",
  base01: "#202020",
  base02: "#303030",
  base03: "#505050",
  base04: "#B0B0B0",
  base05: "#D0D0D0",
  base06: "#E0E0E0",
  base07: "#FFFFFF",
  base08: "#FF0086",
  base09: "#FD8900",
  base0A: "#ABA800",
  base0B: "#00C918",
  base0C: "#1faaaa",
  base0D: "#3777E6",
  base0E: "#AD00A1",
  base0F: "#cc6633"
};
var tomorrow = {
  scheme: "tomorrow",
  author: "chris kempson (http://chriskempson.com)",
  base00: "#1d1f21",
  base01: "#282a2e",
  base02: "#373b41",
  base03: "#969896",
  base04: "#b4b7b4",
  base05: "#c5c8c6",
  base06: "#e0e0e0",
  base07: "#ffffff",
  base08: "#cc6666",
  base09: "#de935f",
  base0A: "#f0c674",
  base0B: "#b5bd68",
  base0C: "#8abeb7",
  base0D: "#81a2be",
  base0E: "#b294bb",
  base0F: "#a3685a"
};
var tube = {
  scheme: "london tube",
  author: "jan t. sott",
  base00: "#231f20",
  base01: "#1c3f95",
  base02: "#5a5758",
  base03: "#737171",
  base04: "#959ca1",
  base05: "#d9d8d8",
  base06: "#e7e7e8",
  base07: "#ffffff",
  base08: "#ee2e24",
  base09: "#f386a1",
  base0A: "#ffd204",
  base0B: "#00853e",
  base0C: "#85cebc",
  base0D: "#009ddc",
  base0E: "#98005d",
  base0F: "#b06110"
};
var twilight = {
  scheme: "twilight",
  author: "david hart (http://hart-dev.com)",
  base00: "#1e1e1e",
  base01: "#323537",
  base02: "#464b50",
  base03: "#5f5a60",
  base04: "#838184",
  base05: "#a7a7a7",
  base06: "#c3c3c3",
  base07: "#ffffff",
  base08: "#cf6a4c",
  base09: "#cda869",
  base0A: "#f9ee98",
  base0B: "#8f9d6a",
  base0C: "#afc4db",
  base0D: "#7587a6",
  base0E: "#9b859d",
  base0F: "#9b703f"
};
var src = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  threezerotwofour,
  apathy,
  ashes,
  atelierDune,
  atelierForest,
  atelierHeath,
  atelierLakeside,
  atelierSeaside,
  bespin,
  brewer,
  bright,
  chalk,
  codeschool,
  colors,
  "default": _default,
  eighties,
  embers,
  flat,
  google,
  grayscale,
  greenscreen,
  harmonic,
  hopscotch,
  isotope,
  marrakesh,
  mocha,
  monokai,
  ocean,
  paraiso,
  pop,
  railscasts,
  shapeshifter,
  solarized,
  summerfruit,
  tomorrow,
  tube,
  twilight
});
var require$$0 = /* @__PURE__ */ getAugmentedNamespace(src);
var colorString$1 = { exports: {} };
var colorName$1 = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};
var simpleSwizzle = { exports: {} };
var isArrayish$1 = function isArrayish(obj) {
  if (!obj || typeof obj === "string") {
    return false;
  }
  return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
};
var isArrayish2 = isArrayish$1;
var concat = Array.prototype.concat;
var slice = Array.prototype.slice;
var swizzle$1 = simpleSwizzle.exports = function swizzle(args) {
  var results = [];
  for (var i = 0, len = args.length; i < len; i++) {
    var arg = args[i];
    if (isArrayish2(arg)) {
      results = concat.call(results, slice.call(arg));
    } else {
      results.push(arg);
    }
  }
  return results;
};
swizzle$1.wrap = function(fn) {
  return function() {
    return fn(swizzle$1(arguments));
  };
};
var colorNames = colorName$1;
var swizzle2 = simpleSwizzle.exports;
var reverseNames = {};
for (var name in colorNames) {
  if (colorNames.hasOwnProperty(name)) {
    reverseNames[colorNames[name]] = name;
  }
}
var cs = colorString$1.exports = {
  to: {},
  get: {}
};
cs.get = function(string) {
  var prefix = string.substring(0, 3).toLowerCase();
  var val;
  var model;
  switch (prefix) {
    case "hsl":
      val = cs.get.hsl(string);
      model = "hsl";
      break;
    case "hwb":
      val = cs.get.hwb(string);
      model = "hwb";
      break;
    default:
      val = cs.get.rgb(string);
      model = "rgb";
      break;
  }
  if (!val) {
    return null;
  }
  return { model, value: val };
};
cs.get.rgb = function(string) {
  if (!string) {
    return null;
  }
  var abbr = /^#([a-f0-9]{3,4})$/i;
  var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
  var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  var keyword = /(\D+)/;
  var rgb = [0, 0, 0, 1];
  var match;
  var i;
  var hexAlpha;
  if (match = string.match(hex)) {
    hexAlpha = match[2];
    match = match[1];
    for (i = 0; i < 3; i++) {
      var i2 = i * 2;
      rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
    }
    if (hexAlpha) {
      rgb[3] = parseInt(hexAlpha, 16) / 255;
    }
  } else if (match = string.match(abbr)) {
    match = match[1];
    hexAlpha = match[3];
    for (i = 0; i < 3; i++) {
      rgb[i] = parseInt(match[i] + match[i], 16);
    }
    if (hexAlpha) {
      rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
    }
  } else if (match = string.match(rgba)) {
    for (i = 0; i < 3; i++) {
      rgb[i] = parseInt(match[i + 1], 0);
    }
    if (match[4]) {
      rgb[3] = parseFloat(match[4]);
    }
  } else if (match = string.match(per)) {
    for (i = 0; i < 3; i++) {
      rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
    }
    if (match[4]) {
      rgb[3] = parseFloat(match[4]);
    }
  } else if (match = string.match(keyword)) {
    if (match[1] === "transparent") {
      return [0, 0, 0, 0];
    }
    rgb = colorNames[match[1]];
    if (!rgb) {
      return null;
    }
    rgb[3] = 1;
    return rgb;
  } else {
    return null;
  }
  for (i = 0; i < 3; i++) {
    rgb[i] = clamp(rgb[i], 0, 255);
  }
  rgb[3] = clamp(rgb[3], 0, 1);
  return rgb;
};
cs.get.hsl = function(string) {
  if (!string) {
    return null;
  }
  var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?[\d\.]+)\s*)?\)$/;
  var match = string.match(hsl);
  if (match) {
    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) + 360) % 360;
    var s = clamp(parseFloat(match[2]), 0, 100);
    var l = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return [h, s, l, a];
  }
  return null;
};
cs.get.hwb = function(string) {
  if (!string) {
    return null;
  }
  var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  var match = string.match(hwb);
  if (match) {
    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) % 360 + 360) % 360;
    var w = clamp(parseFloat(match[2]), 0, 100);
    var b = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return [h, w, b, a];
  }
  return null;
};
cs.to.hex = function() {
  var rgba = swizzle2(arguments);
  return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
};
cs.to.rgb = function() {
  var rgba = swizzle2(arguments);
  return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
};
cs.to.rgb.percent = function() {
  var rgba = swizzle2(arguments);
  var r = Math.round(rgba[0] / 255 * 100);
  var g = Math.round(rgba[1] / 255 * 100);
  var b = Math.round(rgba[2] / 255 * 100);
  return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
};
cs.to.hsl = function() {
  var hsla = swizzle2(arguments);
  return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
};
cs.to.hwb = function() {
  var hwba = swizzle2(arguments);
  var a = "";
  if (hwba.length >= 4 && hwba[3] !== 1) {
    a = ", " + hwba[3];
  }
  return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
};
cs.to.keyword = function(rgb) {
  return reverseNames[rgb.slice(0, 3)];
};
function clamp(num, min, max) {
  return Math.min(Math.max(min, num), max);
}
function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return str.length < 2 ? "0" + str : str;
}
var conversions$2 = { exports: {} };
var colorName = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};
var cssKeywords = colorName;
var reverseKeywords = {};
for (var key in cssKeywords) {
  if (cssKeywords.hasOwnProperty(key)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
}
var convert$2 = conversions$2.exports = {
  rgb: { channels: 3, labels: "rgb" },
  hsl: { channels: 3, labels: "hsl" },
  hsv: { channels: 3, labels: "hsv" },
  hwb: { channels: 3, labels: "hwb" },
  cmyk: { channels: 4, labels: "cmyk" },
  xyz: { channels: 3, labels: "xyz" },
  lab: { channels: 3, labels: "lab" },
  lch: { channels: 3, labels: "lch" },
  hex: { channels: 1, labels: ["hex"] },
  keyword: { channels: 1, labels: ["keyword"] },
  ansi16: { channels: 1, labels: ["ansi16"] },
  ansi256: { channels: 1, labels: ["ansi256"] },
  hcg: { channels: 3, labels: ["h", "c", "g"] },
  apple: { channels: 3, labels: ["r16", "g16", "b16"] },
  gray: { channels: 1, labels: ["gray"] }
};
for (var model in convert$2) {
  if (convert$2.hasOwnProperty(model)) {
    if (!("channels" in convert$2[model])) {
      throw new Error("missing channels property: " + model);
    }
    if (!("labels" in convert$2[model])) {
      throw new Error("missing channel labels property: " + model);
    }
    if (convert$2[model].labels.length !== convert$2[model].channels) {
      throw new Error("channel and label counts mismatch: " + model);
    }
    var channels = convert$2[model].channels;
    var labels = convert$2[model].labels;
    delete convert$2[model].channels;
    delete convert$2[model].labels;
    Object.defineProperty(convert$2[model], "channels", { value: channels });
    Object.defineProperty(convert$2[model], "labels", { value: labels });
  }
}
convert$2.rgb.hsl = function(rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var min = Math.min(r, g, b);
  var max = Math.max(r, g, b);
  var delta = max - min;
  var h;
  var s;
  var l;
  if (max === min) {
    h = 0;
  } else if (r === max) {
    h = (g - b) / delta;
  } else if (g === max) {
    h = 2 + (b - r) / delta;
  } else if (b === max) {
    h = 4 + (r - g) / delta;
  }
  h = Math.min(h * 60, 360);
  if (h < 0) {
    h += 360;
  }
  l = (min + max) / 2;
  if (max === min) {
    s = 0;
  } else if (l <= 0.5) {
    s = delta / (max + min);
  } else {
    s = delta / (2 - max - min);
  }
  return [h, s * 100, l * 100];
};
convert$2.rgb.hsv = function(rgb) {
  var rdif;
  var gdif;
  var bdif;
  var h;
  var s;
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var v = Math.max(r, g, b);
  var diff = v - Math.min(r, g, b);
  var diffc = function(c) {
    return (v - c) / 6 / diff + 1 / 2;
  };
  if (diff === 0) {
    h = s = 0;
  } else {
    s = diff / v;
    rdif = diffc(r);
    gdif = diffc(g);
    bdif = diffc(b);
    if (r === v) {
      h = bdif - gdif;
    } else if (g === v) {
      h = 1 / 3 + rdif - bdif;
    } else if (b === v) {
      h = 2 / 3 + gdif - rdif;
    }
    if (h < 0) {
      h += 1;
    } else if (h > 1) {
      h -= 1;
    }
  }
  return [
    h * 360,
    s * 100,
    v * 100
  ];
};
convert$2.rgb.hwb = function(rgb) {
  var r = rgb[0];
  var g = rgb[1];
  var b = rgb[2];
  var h = convert$2.rgb.hsl(rgb)[0];
  var w = 1 / 255 * Math.min(r, Math.min(g, b));
  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
  return [h, w * 100, b * 100];
};
convert$2.rgb.cmyk = function(rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var c;
  var m;
  var y;
  var k;
  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
};
function comparativeDistance(x, y) {
  return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}
convert$2.rgb.keyword = function(rgb) {
  var reversed = reverseKeywords[rgb];
  if (reversed) {
    return reversed;
  }
  var currentClosestDistance = Infinity;
  var currentClosestKeyword;
  for (var keyword in cssKeywords) {
    if (cssKeywords.hasOwnProperty(keyword)) {
      var value = cssKeywords[keyword];
      var distance = comparativeDistance(rgb, value);
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
  }
  return currentClosestKeyword;
};
convert$2.keyword.rgb = function(keyword) {
  return cssKeywords[keyword];
};
convert$2.rgb.xyz = function(rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
  var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
  var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
  var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
  return [x * 100, y * 100, z * 100];
};
convert$2.rgb.lab = function(rgb) {
  var xyz = convert$2.rgb.xyz(rgb);
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);
  return [l, a, b];
};
convert$2.hsl.rgb = function(hsl) {
  var h = hsl[0] / 360;
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var t1;
  var t2;
  var t3;
  var rgb;
  var val;
  if (s === 0) {
    val = l * 255;
    return [val, val, val];
  }
  if (l < 0.5) {
    t2 = l * (1 + s);
  } else {
    t2 = l + s - l * s;
  }
  t1 = 2 * l - t2;
  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);
    if (t3 < 0) {
      t3++;
    }
    if (t3 > 1) {
      t3--;
    }
    if (6 * t3 < 1) {
      val = t1 + (t2 - t1) * 6 * t3;
    } else if (2 * t3 < 1) {
      val = t2;
    } else if (3 * t3 < 2) {
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    } else {
      val = t1;
    }
    rgb[i] = val * 255;
  }
  return rgb;
};
convert$2.hsl.hsv = function(hsl) {
  var h = hsl[0];
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var smin = s;
  var lmin = Math.max(l, 0.01);
  var sv;
  var v;
  l *= 2;
  s *= l <= 1 ? l : 2 - l;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  v = (l + s) / 2;
  sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
  return [h, sv * 100, v * 100];
};
convert$2.hsv.rgb = function(hsv) {
  var h = hsv[0] / 60;
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var hi = Math.floor(h) % 6;
  var f = h - Math.floor(h);
  var p = 255 * v * (1 - s);
  var q = 255 * v * (1 - s * f);
  var t = 255 * v * (1 - s * (1 - f));
  v *= 255;
  switch (hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
};
convert$2.hsv.hsl = function(hsv) {
  var h = hsv[0];
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var vmin = Math.max(v, 0.01);
  var lmin;
  var sl;
  var l;
  l = (2 - s) * v;
  lmin = (2 - s) * vmin;
  sl = s * vmin;
  sl /= lmin <= 1 ? lmin : 2 - lmin;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
};
convert$2.hwb.rgb = function(hwb) {
  var h = hwb[0] / 360;
  var wh = hwb[1] / 100;
  var bl = hwb[2] / 100;
  var ratio = wh + bl;
  var i;
  var v;
  var f;
  var n;
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }
  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;
  if ((i & 1) !== 0) {
    f = 1 - f;
  }
  n = wh + f * (v - wh);
  var r;
  var g;
  var b;
  switch (i) {
    default:
    case 6:
    case 0:
      r = v;
      g = n;
      b = wh;
      break;
    case 1:
      r = n;
      g = v;
      b = wh;
      break;
    case 2:
      r = wh;
      g = v;
      b = n;
      break;
    case 3:
      r = wh;
      g = n;
      b = v;
      break;
    case 4:
      r = n;
      g = wh;
      b = v;
      break;
    case 5:
      r = v;
      g = wh;
      b = n;
      break;
  }
  return [r * 255, g * 255, b * 255];
};
convert$2.cmyk.rgb = function(cmyk) {
  var c = cmyk[0] / 100;
  var m = cmyk[1] / 100;
  var y = cmyk[2] / 100;
  var k = cmyk[3] / 100;
  var r;
  var g;
  var b;
  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
};
convert$2.xyz.rgb = function(xyz) {
  var x = xyz[0] / 100;
  var y = xyz[1] / 100;
  var z = xyz[2] / 100;
  var r;
  var g;
  var b;
  r = x * 3.2406 + y * -1.5372 + z * -0.4986;
  g = x * -0.9689 + y * 1.8758 + z * 0.0415;
  b = x * 0.0557 + y * -0.204 + z * 1.057;
  r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
  g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
  b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r * 255, g * 255, b * 255];
};
convert$2.xyz.lab = function(xyz) {
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);
  return [l, a, b];
};
convert$2.lab.xyz = function(lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var x;
  var y;
  var z;
  y = (l + 16) / 116;
  x = a / 500 + y;
  z = y - b / 200;
  var y2 = Math.pow(y, 3);
  var x2 = Math.pow(x, 3);
  var z2 = Math.pow(z, 3);
  y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
  x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
  z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
  x *= 95.047;
  y *= 100;
  z *= 108.883;
  return [x, y, z];
};
convert$2.lab.lch = function(lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var hr;
  var h;
  var c;
  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;
  if (h < 0) {
    h += 360;
  }
  c = Math.sqrt(a * a + b * b);
  return [l, c, h];
};
convert$2.lch.lab = function(lch) {
  var l = lch[0];
  var c = lch[1];
  var h = lch[2];
  var a;
  var b;
  var hr;
  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);
  return [l, a, b];
};
convert$2.rgb.ansi16 = function(args) {
  var r = args[0];
  var g = args[1];
  var b = args[2];
  var value = 1 in arguments ? arguments[1] : convert$2.rgb.hsv(args)[2];
  value = Math.round(value / 50);
  if (value === 0) {
    return 30;
  }
  var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
  if (value === 2) {
    ansi += 60;
  }
  return ansi;
};
convert$2.hsv.ansi16 = function(args) {
  return convert$2.rgb.ansi16(convert$2.hsv.rgb(args), args[2]);
};
convert$2.rgb.ansi256 = function(args) {
  var r = args[0];
  var g = args[1];
  var b = args[2];
  if (r === g && g === b) {
    if (r < 8) {
      return 16;
    }
    if (r > 248) {
      return 231;
    }
    return Math.round((r - 8) / 247 * 24) + 232;
  }
  var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
  return ansi;
};
convert$2.ansi16.rgb = function(args) {
  var color2 = args % 10;
  if (color2 === 0 || color2 === 7) {
    if (args > 50) {
      color2 += 3.5;
    }
    color2 = color2 / 10.5 * 255;
    return [color2, color2, color2];
  }
  var mult = (~~(args > 50) + 1) * 0.5;
  var r = (color2 & 1) * mult * 255;
  var g = (color2 >> 1 & 1) * mult * 255;
  var b = (color2 >> 2 & 1) * mult * 255;
  return [r, g, b];
};
convert$2.ansi256.rgb = function(args) {
  if (args >= 232) {
    var c = (args - 232) * 10 + 8;
    return [c, c, c];
  }
  args -= 16;
  var rem;
  var r = Math.floor(args / 36) / 5 * 255;
  var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  var b = rem % 6 / 5 * 255;
  return [r, g, b];
};
convert$2.rgb.hex = function(args) {
  var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
  var string = integer.toString(16).toUpperCase();
  return "000000".substring(string.length) + string;
};
convert$2.hex.rgb = function(args) {
  var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  if (!match) {
    return [0, 0, 0];
  }
  var colorString2 = match[0];
  if (match[0].length === 3) {
    colorString2 = colorString2.split("").map(function(char) {
      return char + char;
    }).join("");
  }
  var integer = parseInt(colorString2, 16);
  var r = integer >> 16 & 255;
  var g = integer >> 8 & 255;
  var b = integer & 255;
  return [r, g, b];
};
convert$2.rgb.hcg = function(rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var max = Math.max(Math.max(r, g), b);
  var min = Math.min(Math.min(r, g), b);
  var chroma = max - min;
  var grayscale2;
  var hue;
  if (chroma < 1) {
    grayscale2 = min / (1 - chroma);
  } else {
    grayscale2 = 0;
  }
  if (chroma <= 0) {
    hue = 0;
  } else if (max === r) {
    hue = (g - b) / chroma % 6;
  } else if (max === g) {
    hue = 2 + (b - r) / chroma;
  } else {
    hue = 4 + (r - g) / chroma + 4;
  }
  hue /= 6;
  hue %= 1;
  return [hue * 360, chroma * 100, grayscale2 * 100];
};
convert$2.hsl.hcg = function(hsl) {
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var c = 1;
  var f = 0;
  if (l < 0.5) {
    c = 2 * s * l;
  } else {
    c = 2 * s * (1 - l);
  }
  if (c < 1) {
    f = (l - 0.5 * c) / (1 - c);
  }
  return [hsl[0], c * 100, f * 100];
};
convert$2.hsv.hcg = function(hsv) {
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var c = s * v;
  var f = 0;
  if (c < 1) {
    f = (v - c) / (1 - c);
  }
  return [hsv[0], c * 100, f * 100];
};
convert$2.hcg.rgb = function(hcg) {
  var h = hcg[0] / 360;
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  if (c === 0) {
    return [g * 255, g * 255, g * 255];
  }
  var pure = [0, 0, 0];
  var hi = h % 1 * 6;
  var v = hi % 1;
  var w = 1 - v;
  var mg = 0;
  switch (Math.floor(hi)) {
    case 0:
      pure[0] = 1;
      pure[1] = v;
      pure[2] = 0;
      break;
    case 1:
      pure[0] = w;
      pure[1] = 1;
      pure[2] = 0;
      break;
    case 2:
      pure[0] = 0;
      pure[1] = 1;
      pure[2] = v;
      break;
    case 3:
      pure[0] = 0;
      pure[1] = w;
      pure[2] = 1;
      break;
    case 4:
      pure[0] = v;
      pure[1] = 0;
      pure[2] = 1;
      break;
    default:
      pure[0] = 1;
      pure[1] = 0;
      pure[2] = w;
  }
  mg = (1 - c) * g;
  return [
    (c * pure[0] + mg) * 255,
    (c * pure[1] + mg) * 255,
    (c * pure[2] + mg) * 255
  ];
};
convert$2.hcg.hsv = function(hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1 - c);
  var f = 0;
  if (v > 0) {
    f = c / v;
  }
  return [hcg[0], f * 100, v * 100];
};
convert$2.hcg.hsl = function(hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var l = g * (1 - c) + 0.5 * c;
  var s = 0;
  if (l > 0 && l < 0.5) {
    s = c / (2 * l);
  } else if (l >= 0.5 && l < 1) {
    s = c / (2 * (1 - l));
  }
  return [hcg[0], s * 100, l * 100];
};
convert$2.hcg.hwb = function(hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1 - c);
  return [hcg[0], (v - c) * 100, (1 - v) * 100];
};
convert$2.hwb.hcg = function(hwb) {
  var w = hwb[1] / 100;
  var b = hwb[2] / 100;
  var v = 1 - b;
  var c = v - w;
  var g = 0;
  if (c < 1) {
    g = (v - c) / (1 - c);
  }
  return [hwb[0], c * 100, g * 100];
};
convert$2.apple.rgb = function(apple) {
  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};
convert$2.rgb.apple = function(rgb) {
  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};
convert$2.gray.rgb = function(args) {
  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};
convert$2.gray.hsl = convert$2.gray.hsv = function(args) {
  return [0, 0, args[0]];
};
convert$2.gray.hwb = function(gray) {
  return [0, 100, gray[0]];
};
convert$2.gray.cmyk = function(gray) {
  return [0, 0, 0, gray[0]];
};
convert$2.gray.lab = function(gray) {
  return [gray[0], 0, 0];
};
convert$2.gray.hex = function(gray) {
  var val = Math.round(gray[0] / 100 * 255) & 255;
  var integer = (val << 16) + (val << 8) + val;
  var string = integer.toString(16).toUpperCase();
  return "000000".substring(string.length) + string;
};
convert$2.rgb.gray = function(rgb) {
  var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  return [val / 255 * 100];
};
var conversions$1 = conversions$2.exports;
function buildGraph() {
  var graph = {};
  var models2 = Object.keys(conversions$1);
  for (var len = models2.length, i = 0; i < len; i++) {
    graph[models2[i]] = {
      distance: -1,
      parent: null
    };
  }
  return graph;
}
function deriveBFS(fromModel) {
  var graph = buildGraph();
  var queue = [fromModel];
  graph[fromModel].distance = 0;
  while (queue.length) {
    var current = queue.pop();
    var adjacents = Object.keys(conversions$1[current]);
    for (var len = adjacents.length, i = 0; i < len; i++) {
      var adjacent = adjacents[i];
      var node = graph[adjacent];
      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }
  return graph;
}
function link(from, to) {
  return function(args) {
    return to(from(args));
  };
}
function wrapConversion(toModel, graph) {
  var path = [graph[toModel].parent, toModel];
  var fn = conversions$1[graph[toModel].parent][toModel];
  var cur = graph[toModel].parent;
  while (graph[cur].parent) {
    path.unshift(graph[cur].parent);
    fn = link(conversions$1[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }
  fn.conversion = path;
  return fn;
}
var route$1 = function(fromModel) {
  var graph = deriveBFS(fromModel);
  var conversion = {};
  var models2 = Object.keys(graph);
  for (var len = models2.length, i = 0; i < len; i++) {
    var toModel = models2[i];
    var node = graph[toModel];
    if (node.parent === null) {
      continue;
    }
    conversion[toModel] = wrapConversion(toModel, graph);
  }
  return conversion;
};
var conversions = conversions$2.exports;
var route = route$1;
var convert$1 = {};
var models = Object.keys(conversions);
function wrapRaw(fn) {
  var wrappedFn = function(args) {
    if (args === void 0 || args === null) {
      return args;
    }
    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }
    return fn(args);
  };
  if ("conversion" in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
function wrapRounded(fn) {
  var wrappedFn = function(args) {
    if (args === void 0 || args === null) {
      return args;
    }
    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }
    var result = fn(args);
    if (typeof result === "object") {
      for (var len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }
    return result;
  };
  if ("conversion" in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
models.forEach(function(fromModel) {
  convert$1[fromModel] = {};
  Object.defineProperty(convert$1[fromModel], "channels", { value: conversions[fromModel].channels });
  Object.defineProperty(convert$1[fromModel], "labels", { value: conversions[fromModel].labels });
  var routes = route(fromModel);
  var routeModels = Object.keys(routes);
  routeModels.forEach(function(toModel) {
    var fn = routes[toModel];
    convert$1[fromModel][toModel] = wrapRounded(fn);
    convert$1[fromModel][toModel].raw = wrapRaw(fn);
  });
});
var colorConvert = convert$1;
var colorString = colorString$1.exports;
var convert = colorConvert;
var _slice = [].slice;
var skippedModels = [
  "keyword",
  "gray",
  "hex"
];
var hashedModelKeys = {};
Object.keys(convert).forEach(function(model) {
  hashedModelKeys[_slice.call(convert[model].labels).sort().join("")] = model;
});
var limiters = {};
function Color(obj, model) {
  if (!(this instanceof Color)) {
    return new Color(obj, model);
  }
  if (model && model in skippedModels) {
    model = null;
  }
  if (model && !(model in convert)) {
    throw new Error("Unknown model: " + model);
  }
  var i;
  var channels;
  if (obj == null) {
    this.model = "rgb";
    this.color = [0, 0, 0];
    this.valpha = 1;
  } else if (obj instanceof Color) {
    this.model = obj.model;
    this.color = obj.color.slice();
    this.valpha = obj.valpha;
  } else if (typeof obj === "string") {
    var result = colorString.get(obj);
    if (result === null) {
      throw new Error("Unable to parse color from string: " + obj);
    }
    this.model = result.model;
    channels = convert[this.model].channels;
    this.color = result.value.slice(0, channels);
    this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
  } else if (obj.length) {
    this.model = model || "rgb";
    channels = convert[this.model].channels;
    var newArr = _slice.call(obj, 0, channels);
    this.color = zeroArray(newArr, channels);
    this.valpha = typeof obj[channels] === "number" ? obj[channels] : 1;
  } else if (typeof obj === "number") {
    obj &= 16777215;
    this.model = "rgb";
    this.color = [
      obj >> 16 & 255,
      obj >> 8 & 255,
      obj & 255
    ];
    this.valpha = 1;
  } else {
    this.valpha = 1;
    var keys = Object.keys(obj);
    if ("alpha" in obj) {
      keys.splice(keys.indexOf("alpha"), 1);
      this.valpha = typeof obj.alpha === "number" ? obj.alpha : 0;
    }
    var hashedKeys = keys.sort().join("");
    if (!(hashedKeys in hashedModelKeys)) {
      throw new Error("Unable to parse color from object: " + JSON.stringify(obj));
    }
    this.model = hashedModelKeys[hashedKeys];
    var labels = convert[this.model].labels;
    var color2 = [];
    for (i = 0; i < labels.length; i++) {
      color2.push(obj[labels[i]]);
    }
    this.color = zeroArray(color2);
  }
  if (limiters[this.model]) {
    channels = convert[this.model].channels;
    for (i = 0; i < channels; i++) {
      var limit = limiters[this.model][i];
      if (limit) {
        this.color[i] = limit(this.color[i]);
      }
    }
  }
  this.valpha = Math.max(0, Math.min(1, this.valpha));
  if (Object.freeze) {
    Object.freeze(this);
  }
}
Color.prototype = {
  toString: function() {
    return this.string();
  },
  toJSON: function() {
    return this[this.model]();
  },
  string: function(places) {
    var self2 = this.model in colorString.to ? this : this.rgb();
    self2 = self2.round(typeof places === "number" ? places : 1);
    var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
    return colorString.to[self2.model](args);
  },
  percentString: function(places) {
    var self2 = this.rgb().round(typeof places === "number" ? places : 1);
    var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
    return colorString.to.rgb.percent(args);
  },
  array: function() {
    return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
  },
  object: function() {
    var result = {};
    var channels = convert[this.model].channels;
    var labels = convert[this.model].labels;
    for (var i = 0; i < channels; i++) {
      result[labels[i]] = this.color[i];
    }
    if (this.valpha !== 1) {
      result.alpha = this.valpha;
    }
    return result;
  },
  unitArray: function() {
    var rgb = this.rgb().color;
    rgb[0] /= 255;
    rgb[1] /= 255;
    rgb[2] /= 255;
    if (this.valpha !== 1) {
      rgb.push(this.valpha);
    }
    return rgb;
  },
  unitObject: function() {
    var rgb = this.rgb().object();
    rgb.r /= 255;
    rgb.g /= 255;
    rgb.b /= 255;
    if (this.valpha !== 1) {
      rgb.alpha = this.valpha;
    }
    return rgb;
  },
  round: function(places) {
    places = Math.max(places || 0, 0);
    return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
  },
  alpha: function(val) {
    if (arguments.length) {
      return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
    }
    return this.valpha;
  },
  red: getset("rgb", 0, maxfn(255)),
  green: getset("rgb", 1, maxfn(255)),
  blue: getset("rgb", 2, maxfn(255)),
  hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, function(val) {
    return (val % 360 + 360) % 360;
  }),
  saturationl: getset("hsl", 1, maxfn(100)),
  lightness: getset("hsl", 2, maxfn(100)),
  saturationv: getset("hsv", 1, maxfn(100)),
  value: getset("hsv", 2, maxfn(100)),
  chroma: getset("hcg", 1, maxfn(100)),
  gray: getset("hcg", 2, maxfn(100)),
  white: getset("hwb", 1, maxfn(100)),
  wblack: getset("hwb", 2, maxfn(100)),
  cyan: getset("cmyk", 0, maxfn(100)),
  magenta: getset("cmyk", 1, maxfn(100)),
  yellow: getset("cmyk", 2, maxfn(100)),
  black: getset("cmyk", 3, maxfn(100)),
  x: getset("xyz", 0, maxfn(100)),
  y: getset("xyz", 1, maxfn(100)),
  z: getset("xyz", 2, maxfn(100)),
  l: getset("lab", 0, maxfn(100)),
  a: getset("lab", 1),
  b: getset("lab", 2),
  keyword: function(val) {
    if (arguments.length) {
      return new Color(val);
    }
    return convert[this.model].keyword(this.color);
  },
  hex: function(val) {
    if (arguments.length) {
      return new Color(val);
    }
    return colorString.to.hex(this.rgb().round().color);
  },
  rgbNumber: function() {
    var rgb = this.rgb().color;
    return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
  },
  luminosity: function() {
    var rgb = this.rgb().color;
    var lum = [];
    for (var i = 0; i < rgb.length; i++) {
      var chan = rgb[i] / 255;
      lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
    }
    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
  },
  contrast: function(color2) {
    var lum1 = this.luminosity();
    var lum2 = color2.luminosity();
    if (lum1 > lum2) {
      return (lum1 + 0.05) / (lum2 + 0.05);
    }
    return (lum2 + 0.05) / (lum1 + 0.05);
  },
  level: function(color2) {
    var contrastRatio = this.contrast(color2);
    if (contrastRatio >= 7.1) {
      return "AAA";
    }
    return contrastRatio >= 4.5 ? "AA" : "";
  },
  isDark: function() {
    var rgb = this.rgb().color;
    var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
    return yiq < 128;
  },
  isLight: function() {
    return !this.isDark();
  },
  negate: function() {
    var rgb = this.rgb();
    for (var i = 0; i < 3; i++) {
      rgb.color[i] = 255 - rgb.color[i];
    }
    return rgb;
  },
  lighten: function(ratio) {
    var hsl = this.hsl();
    hsl.color[2] += hsl.color[2] * ratio;
    return hsl;
  },
  darken: function(ratio) {
    var hsl = this.hsl();
    hsl.color[2] -= hsl.color[2] * ratio;
    return hsl;
  },
  saturate: function(ratio) {
    var hsl = this.hsl();
    hsl.color[1] += hsl.color[1] * ratio;
    return hsl;
  },
  desaturate: function(ratio) {
    var hsl = this.hsl();
    hsl.color[1] -= hsl.color[1] * ratio;
    return hsl;
  },
  whiten: function(ratio) {
    var hwb = this.hwb();
    hwb.color[1] += hwb.color[1] * ratio;
    return hwb;
  },
  blacken: function(ratio) {
    var hwb = this.hwb();
    hwb.color[2] += hwb.color[2] * ratio;
    return hwb;
  },
  grayscale: function() {
    var rgb = this.rgb().color;
    var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    return Color.rgb(val, val, val);
  },
  fade: function(ratio) {
    return this.alpha(this.valpha - this.valpha * ratio);
  },
  opaquer: function(ratio) {
    return this.alpha(this.valpha + this.valpha * ratio);
  },
  rotate: function(degrees) {
    var hsl = this.hsl();
    var hue = hsl.color[0];
    hue = (hue + degrees) % 360;
    hue = hue < 0 ? 360 + hue : hue;
    hsl.color[0] = hue;
    return hsl;
  },
  mix: function(mixinColor, weight) {
    if (!mixinColor || !mixinColor.rgb) {
      throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
    }
    var color1 = mixinColor.rgb();
    var color2 = this.rgb();
    var p = weight === void 0 ? 0.5 : weight;
    var w = 2 * p - 1;
    var a = color1.alpha() - color2.alpha();
    var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
    var w2 = 1 - w1;
    return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
  }
};
Object.keys(convert).forEach(function(model) {
  if (skippedModels.indexOf(model) !== -1) {
    return;
  }
  var channels = convert[model].channels;
  Color.prototype[model] = function() {
    if (this.model === model) {
      return new Color(this);
    }
    if (arguments.length) {
      return new Color(arguments, model);
    }
    var newAlpha = typeof arguments[channels] === "number" ? channels : this.valpha;
    return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
  };
  Color[model] = function(color2) {
    if (typeof color2 === "number") {
      color2 = zeroArray(_slice.call(arguments), channels);
    }
    return new Color(color2, model);
  };
});
function roundTo(num, places) {
  return Number(num.toFixed(places));
}
function roundToPlace(places) {
  return function(num) {
    return roundTo(num, places);
  };
}
function getset(model, channel, modifier) {
  model = Array.isArray(model) ? model : [model];
  model.forEach(function(m) {
    (limiters[m] || (limiters[m] = []))[channel] = modifier;
  });
  model = model[0];
  return function(val) {
    var result;
    if (arguments.length) {
      if (modifier) {
        val = modifier(val);
      }
      result = this[model]();
      result.color[channel] = val;
      return result;
    }
    result = this[model]().color[channel];
    if (modifier) {
      result = modifier(result);
    }
    return result;
  };
}
function maxfn(max) {
  return function(v) {
    return Math.max(0, Math.min(max, v));
  };
}
function assertArray(val) {
  return Array.isArray(val) ? val : [val];
}
function zeroArray(arr, length) {
  for (var i = 0; i < length; i++) {
    if (typeof arr[i] !== "number") {
      arr[i] = 0;
    }
  }
  return arr;
}
var color = Color;
var FUNC_ERROR_TEXT = "Expected a function";
var PLACEHOLDER = "__lodash_placeholder__";
var BIND_FLAG = 1, BIND_KEY_FLAG = 2, CURRY_BOUND_FLAG = 4, CURRY_FLAG = 8, CURRY_RIGHT_FLAG = 16, PARTIAL_FLAG = 32, PARTIAL_RIGHT_FLAG = 64, ARY_FLAG = 128, REARG_FLAG = 256, FLIP_FLAG = 512;
var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
var wrapFlags = [
  ["ary", ARY_FLAG],
  ["bind", BIND_FLAG],
  ["bindKey", BIND_KEY_FLAG],
  ["curry", CURRY_FLAG],
  ["curryRight", CURRY_RIGHT_FLAG],
  ["flip", FLIP_FLAG],
  ["partial", PARTIAL_FLAG],
  ["partialRight", PARTIAL_RIGHT_FLAG],
  ["rearg", REARG_FLAG]
];
var funcTag = "[object Function]", genTag = "[object GeneratorFunction]", symbolTag = "[object Symbol]";
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reTrim = /^\s+|\s+$/g;
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var reIsOctal = /^0o[0-7]+$/i;
var reIsUint = /^(?:0|[1-9]\d*)$/;
var freeParseInt = parseInt;
var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
function arrayEach(array, iteratee) {
  var index = -1, length = array ? array.length : 0;
  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1, length = array.length;
  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}
function baseIsNaN(value) {
  return value !== value;
}
function countHolders(array, placeholder) {
  var length = array.length, result = 0;
  while (length--) {
    if (array[length] === placeholder) {
      result++;
    }
  }
  return result;
}
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
function isHostObject(value) {
  var result = false;
  if (value != null && typeof value.toString != "function") {
    try {
      result = !!(value + "");
    } catch (e) {
    }
  }
  return result;
}
function replaceHolders(array, placeholder) {
  var index = -1, length = array.length, resIndex = 0, result = [];
  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result[resIndex++] = index;
    }
  }
  return result;
}
var funcProto = Function.prototype, objectProto = Object.prototype;
var coreJsData = root["__core-js_shared__"];
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
var funcToString = funcProto.toString;
var hasOwnProperty = objectProto.hasOwnProperty;
var objectToString = objectProto.toString;
var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
var objectCreate = Object.create;
var nativeMax = Math.max, nativeMin = Math.min;
var defineProperty = function() {
  var func = getNative(Object, "defineProperty"), name = getNative.name;
  return name && name.length > 2 ? func : void 0;
}();
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}
function copyArray(source, array) {
  var index = -1, length = source.length;
  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & BIND_FLAG, Ctor = createCtor(func);
  function wrapper() {
    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}
function createCtor(Ctor) {
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0:
        return new Ctor();
      case 1:
        return new Ctor(args[0]);
      case 2:
        return new Ctor(args[0], args[1]);
      case 3:
        return new Ctor(args[0], args[1], args[2]);
      case 4:
        return new Ctor(args[0], args[1], args[2], args[3]);
      case 5:
        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6:
        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7:
        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
    return isObject(result) ? result : thisBinding;
  };
}
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);
  function wrapper() {
    var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
    while (index--) {
      args[index] = arguments[index];
    }
    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
    length -= holders.length;
    if (length < arity) {
      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, void 0, args, holders, void 0, void 0, arity - length);
    }
    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & ARY_FLAG, isBind = bitmask & BIND_FLAG, isBindKey = bitmask & BIND_KEY_FLAG, isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG), isFlip = bitmask & FLIP_FLAG, Ctor = isBindKey ? void 0 : createCtor(func);
  function wrapper() {
    var length = arguments.length, args = Array(length), index = length;
    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
    }
    var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & BIND_FLAG, Ctor = createCtor(func);
  function wrapper() {
    var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & CURRY_FLAG, newHolders = isCurry ? holders : void 0, newHoldersRight = isCurry ? void 0 : holders, newPartials = isCurry ? partials : void 0, newPartialsRight = isCurry ? void 0 : partials;
  bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
  bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
  if (!(bitmask & CURRY_BOUND_FLAG)) {
    bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
  }
  var result = wrapFunc(func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity);
  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & BIND_KEY_FLAG;
  if (!isBindKey && typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
    partials = holders = void 0;
  }
  ary = ary === void 0 ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === void 0 ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;
  if (bitmask & PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials, holdersRight = holders;
    partials = holders = void 0;
  }
  var newData = [
    func,
    bitmask,
    thisArg,
    partials,
    holders,
    partialsRight,
    holdersRight,
    argPos,
    ary,
    arity
  ];
  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
  if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
    bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
  }
  if (!bitmask || bitmask == BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(void 0, newData);
  }
  return setWrapToString(result, func, bitmask);
}
function getHolder(func) {
  var object = func;
  return object.placeholder;
}
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : void 0;
}
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}
function insertWrapDetails(source, details) {
  var length = details.length, lastIndex = length - 1;
  details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
  details = details.join(length > 2 ? ", " : " ");
  return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
}
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
function reorder(array, indexes) {
  var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : void 0;
  }
  return array;
}
var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
  var source = reference + "";
  return defineProperty(wrapper, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
  });
};
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function(pair) {
    var value = "_." + pair[0];
    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}
function curry(func, arity, guard) {
  arity = guard ? void 0 : arity;
  var result = createWrap(func, CURRY_FLAG, void 0, void 0, void 0, void 0, void 0, arity);
  result.placeholder = curry.placeholder;
  return result;
}
function isFunction(value) {
  var tag = isObject(value) ? objectToString.call(value) : "";
  return tag == funcTag || tag == genTag;
}
function isObject(value) {
  var type = typeof value;
  return !!value && (type == "object" || type == "function");
}
function isObjectLike(value) {
  return !!value && typeof value == "object";
}
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
function toInteger(value) {
  var result = toFinite(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, "");
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
function constant(value) {
  return function() {
    return value;
  };
}
function identity(value) {
  return value;
}
curry.placeholder = {};
var lodash_curry = curry;
var colorConverters = {};
Object.defineProperty(colorConverters, "__esModule", {
  value: true
});
colorConverters.yuv2rgb = yuv2rgb;
colorConverters.rgb2yuv = rgb2yuv;
function yuv2rgb(yuv) {
  var y = yuv[0], u = yuv[1], v = yuv[2];
  var r, g, b;
  r = y * 1 + u * 0 + v * 1.13983;
  g = y * 1 + u * -0.39465 + v * -0.5806;
  b = y * 1 + u * 2.02311 + v * 0;
  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r * 255, g * 255, b * 255];
}
function rgb2yuv(rgb) {
  var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255;
  var y = r * 0.299 + g * 0.587 + b * 0.114;
  var u = r * -0.14713 + g * -0.28886 + b * 0.436;
  var v = r * 0.615 + g * -0.51499 + b * -0.10001;
  return [y, u, v];
}
var types = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module"
});
var require$$4 = /* @__PURE__ */ getAugmentedNamespace(types);
(function(exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    invertBase16Theme: true,
    createStyling: true,
    getBase16Theme: true,
    invertTheme: true,
    Base16Theme: true
  };
  Object.defineProperty(exports, "Base16Theme", {
    enumerable: true,
    get: function get() {
      return base16.Base16Theme;
    }
  });
  exports.invertTheme = exports.getBase16Theme = exports.createStyling = exports.invertBase16Theme = void 0;
  var base16 = _interopRequireWildcard(require$$0);
  var _color = _interopRequireDefault(color);
  var _lodash = _interopRequireDefault(lodash_curry);
  var _colorConverters = colorConverters;
  var _types = require$$4;
  Object.keys(_types).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _types[key];
      }
    });
  });
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { "default": obj };
  }
  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function")
      return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache2() {
      return cache;
    };
    return cache;
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { "default": obj };
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var DEFAULT_BASE16 = base16["default"];
  var BASE16_KEYS = Object.keys(DEFAULT_BASE16);
  var flip = function flip2(x) {
    return x < 0.25 ? 1 : x < 0.5 ? 0.9 - x : 1.1 - x;
  };
  var invertColor = function invertColor2(hexString) {
    var color2 = (0, _color["default"])(hexString);
    var _rgb2yuv = (0, _colorConverters.rgb2yuv)(color2.array()), _rgb2yuv2 = _slicedToArray(_rgb2yuv, 3), y = _rgb2yuv2[0], u = _rgb2yuv2[1], v = _rgb2yuv2[2];
    var flippedYuv = [flip(y), u, v];
    var rgb = (0, _colorConverters.yuv2rgb)(flippedYuv);
    return _color["default"].rgb(rgb).hex();
  };
  var merger = function merger2(styling) {
    return function(prevStyling) {
      return {
        className: [prevStyling.className, styling.className].filter(Boolean).join(" "),
        style: _objectSpread(_objectSpread({}, prevStyling.style || {}), styling.style || {})
      };
    };
  };
  var mergeStyling = function mergeStyling2(customStyling, defaultStyling) {
    if (customStyling === void 0) {
      return defaultStyling;
    }
    if (defaultStyling === void 0) {
      return customStyling;
    }
    var customType = _typeof(customStyling);
    var defaultType = _typeof(defaultStyling);
    switch (customType) {
      case "string":
        switch (defaultType) {
          case "string":
            return [defaultStyling, customStyling].filter(Boolean).join(" ");
          case "object":
            return merger({
              className: customStyling,
              style: defaultStyling
            });
          case "function":
            return function(styling) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              return merger({
                className: customStyling
              })(defaultStyling.apply(void 0, [styling].concat(args)));
            };
        }
        break;
      case "object":
        switch (defaultType) {
          case "string":
            return merger({
              className: defaultStyling,
              style: customStyling
            });
          case "object":
            return _objectSpread(_objectSpread({}, defaultStyling), customStyling);
          case "function":
            return function(styling) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              return merger({
                style: customStyling
              })(defaultStyling.apply(void 0, [styling].concat(args)));
            };
        }
        break;
      case "function":
        switch (defaultType) {
          case "string":
            return function(styling) {
              for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                args[_key3 - 1] = arguments[_key3];
              }
              return customStyling.apply(void 0, [merger(styling)({
                className: defaultStyling
              })].concat(args));
            };
          case "object":
            return function(styling) {
              for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                args[_key4 - 1] = arguments[_key4];
              }
              return customStyling.apply(void 0, [merger(styling)({
                style: defaultStyling
              })].concat(args));
            };
          case "function":
            return function(styling) {
              for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
                args[_key5 - 1] = arguments[_key5];
              }
              return customStyling.apply(void 0, [defaultStyling.apply(void 0, [styling].concat(args))].concat(args));
            };
        }
    }
  };
  var mergeStylings = function mergeStylings2(customStylings, defaultStylings) {
    var keys = Object.keys(defaultStylings);
    for (var key in customStylings) {
      if (keys.indexOf(key) === -1)
        keys.push(key);
    }
    return keys.reduce(function(mergedStyling, key2) {
      return mergedStyling[key2] = mergeStyling(customStylings[key2], defaultStylings[key2]), mergedStyling;
    }, {});
  };
  var getStylingByKeys = function getStylingByKeys2(mergedStyling, keys) {
    for (var _len6 = arguments.length, args = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
      args[_key6 - 2] = arguments[_key6];
    }
    if (keys === null) {
      return mergedStyling;
    }
    if (!Array.isArray(keys)) {
      keys = [keys];
    }
    var styles = keys.map(function(key) {
      return mergedStyling[key];
    }).filter(Boolean);
    var props = styles.reduce(function(obj, s) {
      if (typeof s === "string") {
        obj.className = [obj.className, s].filter(Boolean).join(" ");
      } else if (_typeof(s) === "object") {
        obj.style = _objectSpread(_objectSpread({}, obj.style), s);
      } else if (typeof s === "function") {
        obj = _objectSpread(_objectSpread({}, obj), s.apply(void 0, [obj].concat(args)));
      }
      return obj;
    }, {
      className: "",
      style: {}
    });
    if (!props.className) {
      delete props.className;
    }
    if (Object.keys(props.style).length === 0) {
      delete props.style;
    }
    return props;
  };
  var invertBase16Theme = function invertBase16Theme2(base16Theme) {
    return Object.keys(base16Theme).reduce(function(t, key) {
      return t[key] = /^base/.test(key) ? invertColor(base16Theme[key]) : key === "scheme" ? base16Theme[key] + ":inverted" : base16Theme[key], t;
    }, {});
  };
  exports.invertBase16Theme = invertBase16Theme;
  var createStyling = (0, _lodash["default"])(function(getStylingFromBase16) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var themeOrStyling = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var _options$defaultBase = options.defaultBase16, defaultBase16 = _options$defaultBase === void 0 ? DEFAULT_BASE16 : _options$defaultBase, _options$base16Themes = options.base16Themes, base16Themes = _options$base16Themes === void 0 ? null : _options$base16Themes;
    var base16Theme = getBase16Theme(themeOrStyling, base16Themes);
    if (base16Theme) {
      themeOrStyling = _objectSpread(_objectSpread({}, base16Theme), themeOrStyling);
    }
    var theme = BASE16_KEYS.reduce(function(t, key) {
      return t[key] = themeOrStyling[key] || defaultBase16[key], t;
    }, {});
    var customStyling = Object.keys(themeOrStyling).reduce(function(s, key) {
      return BASE16_KEYS.indexOf(key) === -1 ? (s[key] = themeOrStyling[key], s) : s;
    }, {});
    var defaultStyling = getStylingFromBase16(theme);
    var mergedStyling = mergeStylings(customStyling, defaultStyling);
    for (var _len7 = arguments.length, args = new Array(_len7 > 3 ? _len7 - 3 : 0), _key7 = 3; _key7 < _len7; _key7++) {
      args[_key7 - 3] = arguments[_key7];
    }
    return (0, _lodash["default"])(getStylingByKeys, 2).apply(void 0, [mergedStyling].concat(args));
  }, 3);
  exports.createStyling = createStyling;
  var isStylingConfig = function isStylingConfig2(theme) {
    return !!theme.extend;
  };
  var getBase16Theme = function getBase16Theme2(theme, base16Themes) {
    if (theme && isStylingConfig(theme) && theme.extend) {
      theme = theme.extend;
    }
    if (typeof theme === "string") {
      var _theme$split = theme.split(":"), _theme$split2 = _slicedToArray(_theme$split, 2), _themeName = _theme$split2[0], modifier = _theme$split2[1];
      if (base16Themes) {
        theme = base16Themes[_themeName];
      } else {
        theme = base16[_themeName];
      }
      if (modifier === "inverted") {
        theme = invertBase16Theme(theme);
      }
    }
    return theme && Object.prototype.hasOwnProperty.call(theme, "base00") ? theme : void 0;
  };
  exports.getBase16Theme = getBase16Theme;
  var invertTheme = function invertTheme2(theme) {
    if (typeof theme === "string") {
      return "".concat(theme, ":inverted");
    }
    if (theme && isStylingConfig(theme) && theme.extend) {
      if (typeof theme.extend === "string") {
        return _objectSpread(_objectSpread({}, theme), {}, {
          extend: "".concat(theme.extend, ":inverted")
        });
      }
      return _objectSpread(_objectSpread({}, theme), {}, {
        extend: invertBase16Theme(theme.extend)
      });
    }
    if (theme) {
      return invertBase16Theme(theme);
    }
    return theme;
  };
  exports.invertTheme = invertTheme;
})(lib);
const colorMap = (theme) => ({
  backgroundColor: theme.base00,
  ellipsisColor: theme.base09,
  braceColor: theme.base07,
  expandedIcon: theme.base0D,
  collapsedIcon: theme.base0E,
  keyColor: theme.base07,
  arrayKeyColor: theme.base0C,
  objectSize: theme.base04,
  copyToClipboard: theme.base0F,
  copyToClipboardCheck: theme.base0D,
  objectBorder: theme.base02,
  dataTypes: {
    boolean: theme.base0E,
    date: theme.base0D,
    float: theme.base0B,
    function: theme.base0D,
    integer: theme.base0F,
    string: theme.base09,
    nan: theme.base08,
    null: theme.base0A,
    undefined: theme.base05,
    regexp: theme.base0A,
    background: theme.base02
  },
  editVariable: {
    editIcon: theme.base0E,
    cancelIcon: theme.base09,
    removeIcon: theme.base09,
    addIcon: theme.base0E,
    checkIcon: theme.base0E,
    background: theme.base01,
    color: theme.base0A,
    border: theme.base07
  },
  addKeyModal: {
    background: theme.base05,
    border: theme.base04,
    color: theme.base0A,
    labelColor: theme.base01
  },
  validationFailure: {
    background: theme.base09,
    iconColor: theme.base01,
    fontColor: theme.base01
  }
});
const getDefaultThemeStyling = (theme) => {
  const colors2 = colorMap(theme);
  return {
    "app-container": {
      fontFamily: constants.globalFontFamily,
      cursor: constants.globalCursor,
      backgroundColor: colors2.backgroundColor,
      position: "relative"
    },
    ellipsis: {
      display: "inline-block",
      color: colors2.ellipsisColor,
      fontSize: constants.ellipsisFontSize,
      lineHeight: constants.ellipsisLineHeight,
      cursor: constants.ellipsisCursor
    },
    "brace-row": {
      display: "inline-block",
      cursor: "pointer"
    },
    brace: {
      display: "inline-block",
      cursor: constants.braceCursor,
      fontWeight: constants.braceFontWeight,
      color: colors2.braceColor
    },
    "expanded-icon": {
      color: colors2.expandedIcon
    },
    "collapsed-icon": {
      color: colors2.collapsedIcon
    },
    colon: {
      display: "inline-block",
      margin: constants.keyMargin,
      color: colors2.keyColor,
      verticalAlign: "top"
    },
    objectKeyVal: (component, variable_style) => {
      return {
        style: __spreadProps(__spreadValues({
          paddingTop: constants.keyValPaddingTop,
          paddingRight: constants.keyValPaddingRight,
          paddingBottom: constants.keyValPaddingBottom,
          borderLeft: constants.keyValBorderLeft + " " + colors2.objectBorder,
          ":hover": {
            paddingLeft: variable_style.paddingLeft - 1 + "px",
            borderLeft: constants.keyValBorderHover + " " + colors2.objectBorder
          }
        }, variable_style), {
          paddingLeft: variable_style.paddingLeft + "px"
        })
      };
    },
    "object-key-val-no-border": {
      padding: constants.keyValPadding
    },
    "pushed-content": {
      marginLeft: constants.pushedContentMarginLeft
    },
    variableValue: (component, variable_style) => {
      return {
        style: __spreadValues({
          display: "inline-block",
          paddingRight: constants.variableValuePaddingRight,
          position: "relative"
        }, variable_style)
      };
    },
    "object-name": {
      display: "inline-block",
      color: colors2.keyColor,
      letterSpacing: constants.keyLetterSpacing,
      fontStyle: constants.keyFontStyle,
      verticalAlign: constants.keyVerticalAlign,
      opacity: constants.keyOpacity,
      ":hover": {
        opacity: constants.keyOpacityHover
      }
    },
    "array-key": {
      display: "inline-block",
      color: colors2.arrayKeyColor,
      letterSpacing: constants.keyLetterSpacing,
      fontStyle: constants.keyFontStyle,
      verticalAlign: constants.keyVerticalAlign,
      opacity: constants.keyOpacity,
      ":hover": {
        opacity: constants.keyOpacityHover
      }
    },
    "object-size": {
      color: colors2.objectSize,
      borderRadius: constants.objectSizeBorderRadius,
      fontStyle: constants.objectSizeFontStyle,
      margin: constants.objectSizeMargin,
      cursor: "default"
    },
    "data-type-label": {
      fontSize: constants.dataTypeFontSize,
      marginRight: constants.dataTypeMarginRight,
      opacity: constants.datatypeOpacity
    },
    boolean: {
      display: "inline-block",
      color: colors2.dataTypes.boolean
    },
    date: {
      display: "inline-block",
      color: colors2.dataTypes.date
    },
    "date-value": {
      marginLeft: constants.dateValueMarginLeft
    },
    float: {
      display: "inline-block",
      color: colors2.dataTypes.float
    },
    function: {
      display: "inline-block",
      color: colors2.dataTypes["function"],
      cursor: "pointer",
      whiteSpace: "pre-line"
    },
    "function-value": {
      fontStyle: "italic"
    },
    integer: {
      display: "inline-block",
      color: colors2.dataTypes.integer
    },
    string: {
      display: "inline-block",
      color: colors2.dataTypes.string
    },
    nan: {
      display: "inline-block",
      color: colors2.dataTypes.nan,
      fontSize: constants.nanFontSize,
      fontWeight: constants.nanFontWeight,
      backgroundColor: colors2.dataTypes.background,
      padding: constants.nanPadding,
      borderRadius: constants.nanBorderRadius
    },
    null: {
      display: "inline-block",
      color: colors2.dataTypes.null,
      fontSize: constants.nullFontSize,
      fontWeight: constants.nullFontWeight,
      backgroundColor: colors2.dataTypes.background,
      padding: constants.nullPadding,
      borderRadius: constants.nullBorderRadius
    },
    undefined: {
      display: "inline-block",
      color: colors2.dataTypes.undefined,
      fontSize: constants.undefinedFontSize,
      padding: constants.undefinedPadding,
      borderRadius: constants.undefinedBorderRadius,
      backgroundColor: colors2.dataTypes.background
    },
    regexp: {
      display: "inline-block",
      color: colors2.dataTypes.regexp
    },
    "copy-to-clipboard": {
      cursor: constants.clipboardCursor
    },
    "copy-icon": {
      color: colors2.copyToClipboard,
      fontSize: constants.iconFontSize,
      marginRight: constants.iconMarginRight,
      verticalAlign: "top"
    },
    "copy-icon-copied": {
      color: colors2.copyToClipboardCheck,
      marginLeft: constants.clipboardCheckMarginLeft
    },
    "array-group-meta-data": {
      display: "inline-block",
      padding: constants.arrayGroupMetaPadding
    },
    "object-meta-data": {
      display: "inline-block",
      padding: constants.metaDataPadding
    },
    "icon-container": {
      display: "inline-block",
      width: constants.iconContainerWidth
    },
    tooltip: {
      padding: constants.tooltipPadding
    },
    removeVarIcon: {
      verticalAlign: "top",
      display: "inline-block",
      color: colors2.editVariable.removeIcon,
      cursor: constants.iconCursor,
      fontSize: constants.iconFontSize,
      marginRight: constants.iconMarginRight
    },
    addVarIcon: {
      verticalAlign: "top",
      display: "inline-block",
      color: colors2.editVariable.addIcon,
      cursor: constants.iconCursor,
      fontSize: constants.iconFontSize,
      marginRight: constants.iconMarginRight
    },
    editVarIcon: {
      verticalAlign: "top",
      display: "inline-block",
      color: colors2.editVariable.editIcon,
      cursor: constants.iconCursor,
      fontSize: constants.iconFontSize,
      marginRight: constants.iconMarginRight
    },
    "edit-icon-container": {
      display: "inline-block",
      verticalAlign: "top"
    },
    "check-icon": {
      display: "inline-block",
      cursor: constants.iconCursor,
      color: colors2.editVariable.checkIcon,
      fontSize: constants.iconFontSize,
      paddingRight: constants.iconPaddingRight
    },
    "cancel-icon": {
      display: "inline-block",
      cursor: constants.iconCursor,
      color: colors2.editVariable.cancelIcon,
      fontSize: constants.iconFontSize,
      paddingRight: constants.iconPaddingRight
    },
    "edit-input": {
      display: "inline-block",
      minWidth: constants.editInputMinWidth,
      borderRadius: constants.editInputBorderRadius,
      backgroundColor: colors2.editVariable.background,
      color: colors2.editVariable.color,
      padding: constants.editInputPadding,
      marginRight: constants.editInputMarginRight,
      fontFamily: constants.editInputFontFamily
    },
    "detected-row": {
      paddingTop: constants.detectedRowPaddingTop
    },
    "key-modal-request": {
      position: constants.addKeyCoverPosition,
      top: constants.addKeyCoverPositionPx,
      left: constants.addKeyCoverPositionPx,
      right: constants.addKeyCoverPositionPx,
      bottom: constants.addKeyCoverPositionPx,
      backgroundColor: constants.addKeyCoverBackground
    },
    "key-modal": {
      width: constants.addKeyModalWidth,
      backgroundColor: colors2.addKeyModal.background,
      marginLeft: constants.addKeyModalMargin,
      marginRight: constants.addKeyModalMargin,
      padding: constants.addKeyModalPadding,
      borderRadius: constants.addKeyModalRadius,
      marginTop: "15px",
      position: "relative"
    },
    "key-modal-label": {
      color: colors2.addKeyModal.labelColor,
      marginLeft: "2px",
      marginBottom: "5px",
      fontSize: "11px"
    },
    "key-modal-input-container": {
      overflow: "hidden"
    },
    "key-modal-input": {
      width: "100%",
      padding: "3px 6px",
      fontFamily: "monospace",
      color: colors2.addKeyModal.color,
      border: "none",
      boxSizing: "border-box",
      borderRadius: "2px"
    },
    "key-modal-cancel": {
      backgroundColor: colors2.editVariable.removeIcon,
      position: "absolute",
      top: "0px",
      right: "0px",
      borderRadius: "0px 3px 0px 3px",
      cursor: "pointer"
    },
    "key-modal-cancel-icon": {
      color: colors2.addKeyModal.labelColor,
      fontSize: constants.iconFontSize,
      transform: "rotate(45deg)"
    },
    "key-modal-submit": {
      color: colors2.editVariable.addIcon,
      fontSize: constants.iconFontSize,
      position: "absolute",
      right: "2px",
      top: "3px",
      cursor: "pointer"
    },
    "function-ellipsis": {
      display: "inline-block",
      color: colors2.ellipsisColor,
      fontSize: constants.ellipsisFontSize,
      lineHeight: constants.ellipsisLineHeight,
      cursor: constants.ellipsisCursor
    },
    "validation-failure": {
      float: "right",
      padding: "3px 6px",
      borderRadius: "2px",
      cursor: "pointer",
      color: colors2.validationFailure.fontColor,
      backgroundColor: colors2.validationFailure.background
    },
    "validation-failure-label": {
      marginRight: "6px"
    },
    "validation-failure-clear": {
      position: "relative",
      verticalAlign: "top",
      cursor: "pointer",
      color: colors2.validationFailure.iconColor,
      fontSize: constants.iconFontSize,
      transform: "rotate(45deg)"
    }
  };
};
const getStyle = (theme) => {
  let rjv_theme = rjv_default;
  if (theme === false || theme === "none") {
    rjv_theme = rjv_grey;
  }
  return lib.createStyling(getDefaultThemeStyling, { defaultBase16: rjv_theme })(theme);
};
function style(theme, component, args) {
  if (!theme) {
    console.error("theme has not been set");
  }
  return getStyle(theme)(component, args);
}
var CopyToClipboard = defineComponent({
  props: {
    src: {
      type: [Object, String, Number, Boolean, Function],
      default: ""
    },
    rowHovered: Boolean,
    hidden: Boolean
  },
  setup(props) {
    const setting = inject("setting");
    const copyConfig = toRaw(inject("copyConfig"));
    const state = reactive({
      copied: false
    });
    let copiedTimer = null;
    onBeforeUnmount(() => {
      if (copiedTimer) {
        clearTimeout(copiedTimer);
        copiedTimer = null;
      }
    });
    function handleCopy() {
      const container = document.createElement("textarea");
      container.innerHTML = JSON.stringify(clipboardValue(props.src), null, "  ");
      document.body.appendChild(container);
      container.select();
      document.execCommand("copy");
      document.body.removeChild(container);
      copiedTimer = setTimeout(() => {
        state.copied = false;
      }, 5500);
      state.copied = true;
      if (typeof setting.enableClipboard === "function") {
        setting.enableClipboard({
          src: props.src,
          name: copyConfig.name,
          namespace: copyConfig.namespace
        });
      }
    }
    function getClippyIcon() {
      if (state.copied) {
        return createVNode("span", null, [createVNode(Clippy, mergeProps({
          "class": "copy-icon"
        }, style(setting.theme, "copy-icon")), null), createVNode("span", style(setting.theme, "copy-icon-copied"), [createTextVNode("\u2714")])]);
      }
      return createVNode(Clippy, mergeProps({
        "class": "copy-icon"
      }, style(setting.theme, "copy-icon")), null);
    }
    function clipboardValue(value) {
      const type = toType(value);
      switch (type) {
        case "function":
        case "regexp":
          return value.toString();
        default:
          return value;
      }
    }
    return () => {
      const style$1 = style(setting.theme, "copy-to-clipboard").style;
      let display = "inline";
      if (props.hidden) {
        display = "none";
      }
      return createVNode("span", {
        "class": "copy-to-clipboard-container",
        "title": "Copy to clipboard",
        "style": {
          verticalAlign: "top",
          display: props.rowHovered ? "inline-block" : "none"
        }
      }, [createVNode("span", {
        "style": __spreadProps(__spreadValues({}, style$1), {
          display
        }),
        "onClick": handleCopy
      }, [getClippyIcon()])]);
    };
  }
});
var DataTypeLabel = defineComponent({
  props: {
    typeName: {
      type: String,
      required: true
    }
  },
  setup(props) {
    const setting = inject("setting");
    return () => createVNode("span", mergeProps({
      "class": "data-type-label"
    }, style(setting.theme, "data-type-label")), [props.typeName]);
  }
});
var JsonBoolean = defineComponent({
  props: {
    value: Boolean
  },
  setup(props) {
    const setting = inject("setting");
    return () => createVNode("div", style(setting.theme, "boolean"), [setting.displayDataTypes && createVNode(DataTypeLabel, {
      "typeName": "bool"
    }, null), props.value ? "true" : "false"]);
  }
});
var JsonDate = defineComponent({
  props: {
    value: {
      type: Date,
      required: true
    }
  },
  setup(props) {
    const setting = inject("setting");
    const display_options = {
      weekday: "short",
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    };
    return () => createVNode("div", style(setting.theme, "date"), [setting.displayDataTypes && createVNode(DataTypeLabel, {
      "typeName": "date"
    }, null), createVNode("span", mergeProps({
      "class": "date-value"
    }, style(setting.theme, "date-value")), [props.value.toLocaleTimeString("en-us", display_options)])]);
  }
});
var JsonFloat = defineComponent({
  props: {
    value: {
      type: Number,
      required: true
    }
  },
  setup(props) {
    const setting = inject("setting");
    return () => createVNode("div", style(setting.theme, "float"), [setting.displayDataTypes && createVNode(DataTypeLabel, {
      "typeName": "float"
    }, null), props.value]);
  }
});
var JsonFunction = defineComponent({
  props: {
    value: {
      type: Function,
      required: true
    }
  },
  setup(props) {
    const setting = inject("setting");
    const state = reactive({
      collapsed: true
    });
    const toggleCollapsed = () => {
      state.collapsed = !state.collapsed;
    };
    const getFunctionDisplay = (collapsed) => {
      if (collapsed) {
        return createVNode("span", null, [props.value.toString().replace(/\{[\s\S]+/, ""), createVNode("span", {
          "class": "function-collapsed",
          "style": {
            fontWeight: "bold"
          }
        }, [createVNode("span", null, ["{"]), createVNode("span", style(setting.theme, "ellipsis"), [createTextVNode("...")]), createVNode("span", null, ["}"])])]);
      } else {
        return props.value.toString();
      }
    };
    return () => {
      const {
        displayDataTypes,
        theme
      } = setting;
      return createVNode("div", style(theme, "function"), [displayDataTypes && createVNode(DataTypeLabel, {
        "typeName": "function"
      }, null), createVNode("span", mergeProps(style(theme, "function-value"), {
        "class": "rjv-function-container",
        "onClick": toggleCollapsed
      }), [getFunctionDisplay(state.collapsed)])]);
    };
  }
});
var JsonNan = defineComponent({
  setup() {
    const setting = inject("setting");
    return () => createVNode("div", style(setting.theme, "nan"), [createTextVNode("NaN")]);
  }
});
var JsonNull = defineComponent({
  setup() {
    const setting = inject("setting");
    return () => createVNode("div", style(setting.theme, "null"), [createTextVNode("NULL")]);
  }
});
var JsonInteger = defineComponent({
  props: {
    value: {
      type: Number,
      required: true
    }
  },
  setup(props) {
    const setting = inject("setting");
    return () => createVNode("div", style(setting.theme, "integer"), [setting.displayDataTypes && createVNode(DataTypeLabel, {
      "typeName": "int"
    }, null), props.value]);
  }
});
var JsonRegexp = defineComponent({
  props: {
    value: {
      type: RegExp,
      required: true
    }
  },
  setup(props) {
    const setting = inject("setting");
    return () => createVNode("div", style(setting.theme, "regexp"), [setting.displayDataTypes && createVNode(DataTypeLabel, {
      "typeName": "regexp"
    }, null), props.value.toString()]);
  }
});
var JsonString = defineComponent({
  props: {
    value: {
      type: String,
      required: true
    }
  },
  setup(props) {
    const setting = inject("setting");
    const state = reactive({
      collapsed: true
    });
    const toggleCollapsed = () => {
      state.collapsed = !state.collapsed;
    };
    return () => {
      const {
        collapseStringsAfterLength,
        displayDataTypes,
        theme
      } = setting;
      let value = props.value;
      const collapsible = toType(collapseStringsAfterLength) === "integer";
      const style$1 = {
        style: {
          cursor: "default"
        }
      };
      if (collapsible && value.length > collapseStringsAfterLength) {
        style$1.style.cursor = "pointer";
        if (state.collapsed) {
          value = createVNode("span", null, [value.substring(0, collapseStringsAfterLength), createVNode("span", style(theme, "ellipsis"), [createTextVNode(" ...")])]);
        }
      }
      return createVNode("div", style(theme, "string"), [displayDataTypes && createVNode(DataTypeLabel, {
        "typeName": "string"
      }, null), createVNode("span", mergeProps({
        "class": "string-value"
      }, style$1, {
        "onClick": toggleCollapsed
      }), [createTextVNode('"'), value, createTextVNode('"')])]);
    };
  }
});
var JsonUndefined = defineComponent({
  setup() {
    const setting = inject("setting");
    return () => createVNode("div", style(setting.theme, "undefined"), [createTextVNode("undefined")]);
  }
});
var VariableEditor = defineComponent({
  props: {
    variable: {
      type: Object,
      required: true
    },
    singleIndent: {
      type: Number,
      required: true
    },
    type: {
      type: String,
      required: true
    }
  },
  setup(props) {
    const setting = inject("setting");
    const state = reactive({
      editMode: false,
      editValue: "",
      hovered: false,
      renameKey: false,
      parsedInput: {
        type: false,
        value: null
      }
    });
    const getValue2 = (variable, editMode) => {
      const type = editMode ? false : variable.type;
      const valueProps = {
        value: variable.value,
        theme: setting.theme,
        displayDataTypes: setting.displayDataTypes
      };
      switch (type) {
        case false:
          return null;
        case "string":
          return createVNode(JsonString, valueProps, null);
        case "integer":
          return createVNode(JsonInteger, valueProps, null);
        case "float":
          return createVNode(JsonFloat, valueProps, null);
        case "boolean":
          return createVNode(JsonBoolean, valueProps, null);
        case "function":
          return createVNode(JsonFunction, valueProps, null);
        case "null":
          return createVNode(JsonNull, valueProps, null);
        case "nan":
          return createVNode(JsonNan, valueProps, null);
        case "undefined":
          return createVNode(JsonUndefined, valueProps, null);
        case "date":
          return createVNode(JsonDate, valueProps, null);
        case "regexp":
          return createVNode(JsonRegexp, valueProps, null);
        default:
          return createVNode("div", {
            "class": "object-value"
          }, [JSON.stringify(variable.value)]);
      }
    };
    return () => {
      return createVNode("div", mergeProps(style(setting.theme, "objectKeyVal", {
        paddingLeft: setting.indentWidth * props.singleIndent
      }), {
        "onMouseenter": () => state.hovered = true,
        "onMouseleave": () => state.hovered = false,
        "class": "variable-row",
        "key": props.variable.name
      }), [props.type == "array" ? setting.displayArrayKey ? createVNode("span", style(setting.theme, "array-key"), [props.variable.name, createVNode("div", style(setting.theme, "colon"), [createTextVNode(":")])]) : null : createVNode("span", null, [createVNode("span", mergeProps(style(setting.theme, "object-name"), {
        "class": "object-key"
      }), [!!setting.quotesOnKeys && createVNode("span", {
        "style": {
          verticalAlign: "top"
        }
      }, [createTextVNode('"')]), createVNode("span", {
        "style": {
          display: "inline-block"
        }
      }, [props.variable.name]), !!setting.quotesOnKeys && createVNode("span", {
        "style": {
          verticalAlign: "top"
        }
      }, [createTextVNode('"')])]), createVNode("span", style(setting.theme, "colon"), [createTextVNode(":")])]), createVNode("div", mergeProps({
        "class": "variable-value"
      }, style(setting.theme, "variableValue", {
        cursor: "default"
      })), [getValue2(props.variable, state.editMode)]), setting.enableClipboard ? createVNode(CopyToClipboard, {
        "rowHovered": state.hovered,
        "hidden": state.editMode,
        "src": props.variable.value
      }, null) : null]);
    };
  }
});
var VariableMeta = defineComponent({
  props: {
    src: {
      type: Object,
      required: true
    },
    size: {
      type: Number,
      required: true
    },
    rowHovered: Boolean
  },
  setup(props) {
    const setting = inject("setting");
    function getObjectSize() {
      if (setting.displayObjectSize) {
        return createVNode("span", mergeProps({
          "class": "object-size"
        }, style(setting.theme, "object-size")), [props.size, createTextVNode(" item"), props.size === 1 ? "" : "s"]);
      }
    }
    return () => createVNode("div", mergeProps(style(setting.theme, "object-meta-data"), {
      "class": "object-meta-data",
      "onClick": (e) => {
        e.stopPropagation();
      }
    }), [getObjectSize(), setting.enableClipboard ? createVNode(CopyToClipboard, {
      "src": toRaw(props.src),
      "rowHovered": props.rowHovered
    }, null) : null]);
  }
});
function getObjectName(props) {
  const {
    parentType,
    quotesOnKeys,
    theme,
    jsvRoot,
    name,
    displayArrayKey
  } = props;
  const display_name = props.name ? props.name : "";
  if (jsvRoot && (name === false || name === null)) {
    return createVNode("span", null, null);
  } else if (parentType == "array") {
    return displayArrayKey ? createVNode("span", style(theme, "array-key"), [createVNode("span", {
      "class": "array-key"
    }, [display_name]), createVNode("span", style(theme, "colon"), [createTextVNode(":")])]) : createVNode("span", null, null);
  } else {
    return createVNode("span", style(theme, "object-name"), [createVNode("span", {
      "class": "object-key"
    }, [quotesOnKeys && createVNode("span", {
      "style": {
        verticalAlign: "top"
      }
    }, [createTextVNode('"')]), createVNode("span", null, [display_name]), quotesOnKeys && createVNode("span", {
      "style": {
        verticalAlign: "top"
      }
    }, [createTextVNode('"')])]), createVNode("span", style(theme, "colon"), [createTextVNode(":")])]);
  }
}
var CollapsedIcon = defineComponent({
  setup() {
    const setting = inject("setting");
    return () => {
      switch (setting.iconStyle) {
        case "triangle":
          return createVNode(ArrowRight, mergeProps(style(setting.theme, "collapsed-icon"), {
            "class": "collapsed-icon"
          }), null);
        case "square":
          return createVNode(SquarePlus, mergeProps(style(setting.theme, "collapsed-icon"), {
            "class": "collapsed-icon"
          }), null);
        default:
          return createVNode(CirclePlus, mergeProps(style(setting.theme, "collapsed-icon"), {
            "class": "collapsed-icon"
          }), null);
      }
    };
  }
});
var ExpandedIcon = defineComponent({
  setup() {
    const setting = inject("setting");
    return () => {
      switch (setting.iconStyle) {
        case "triangle":
          return createVNode(ArrowDown, mergeProps(style(setting.theme, "expanded-icon"), {
            "class": "expanded-icon"
          }), null);
        case "square":
          return createVNode(SquareMinus, mergeProps(style(setting.theme, "expanded-icon"), {
            "class": "expanded-icon"
          }), null);
        default:
          return createVNode(CircleMinus, mergeProps(style(setting.theme, "expanded-icon"), {
            "class": "expanded-icon"
          }), null);
      }
    };
  }
});
const SINGLE_INDENT$1 = 5;
var ArrayGroup = defineComponent({
  props: {
    jsvRoot: Boolean,
    src: {
      type: Object,
      required: true
    },
    name: {
      type: [String, Boolean],
      default: ""
    },
    namespace: {
      type: Array,
      required: true
    },
    indexOffset: {
      type: Number,
      default: 0
    },
    type: {
      type: String,
      required: true
    },
    depth: {
      type: Number,
      required: true
    },
    parentType: {
      type: String,
      default: ""
    }
  },
  setup(props) {
    const setting = inject("setting");
    const copyConfig = reactive({
      name: props.name,
      namespace: toRaw(props.namespace)
    });
    provide("copyConfig", copyConfig);
    const state = reactive({
      expanded: []
    });
    function toggleCollapsed(i) {
      const newExpanded = [];
      for (const j in state.expanded) {
        newExpanded.push(state.expanded[j]);
      }
      newExpanded[i] = !newExpanded[i];
      state.expanded = newExpanded;
    }
    function getExpandedIcon(i) {
      const {
        theme,
        iconStyle
      } = setting;
      if (state.expanded[i]) {
        return createVNode(ExpandedIcon, {
          theme,
          iconStyle
        }, null);
      }
      return createVNode(CollapsedIcon, {
        theme,
        iconStyle
      }, null);
    }
    return () => {
      const {
        groupArraysAfterLength,
        theme
      } = setting;
      const _a = toRaw(props), {
        src: src2,
        depth,
        name,
        jsvRoot,
        namespace,
        parentType
      } = _a, rest = __objRest(_a, [
        "src",
        "depth",
        "name",
        "jsvRoot",
        "namespace",
        "parentType"
      ]);
      let object_padding_left = 0;
      const array_group_padding_left = setting.indentWidth * SINGLE_INDENT$1;
      if (!jsvRoot) {
        object_padding_left = setting.indentWidth * SINGLE_INDENT$1;
      }
      const size = groupArraysAfterLength;
      const groups = Math.ceil(src2.length / size);
      return createVNode("div", mergeProps({
        "class": "object-key-val"
      }, style(theme, jsvRoot ? "jsv-root" : "objectKeyVal", {
        paddingLeft: object_padding_left
      })), [createVNode(getObjectName, mergeProps({
        "theme": theme,
        "quotesOnKeys": setting.quotesOnKeys
      }, props), null), createVNode("span", null, [createVNode(VariableMeta, mergeProps({
        "size": src2.length
      }, props), null)]), [...Array(groups)].map((_, i) => createVNode("div", mergeProps({
        "key": i,
        "class": "object-key-val array-group"
      }, style(theme, "objectKeyVal", {
        marginLeft: 6,
        paddingLeft: array_group_padding_left
      })), [createVNode("span", style(theme, "brace-row"), [createVNode("div", mergeProps({
        "class": "icon-container"
      }, style(theme, "icon-container"), {
        "onClick": () => {
          toggleCollapsed(i);
        }
      }), [getExpandedIcon(i)]), state.expanded[i] ? createVNode(JsonObject$1, mergeProps(rest, {
        "key": name + i,
        "depth": 0,
        "name": false,
        "collapsed": false,
        "indexOffset": i * size,
        "src": src2.slice(i * size, i * size + size),
        "namespace": namespace,
        "type": "array",
        "parentType": "array_group"
      }), null) : createVNode("span", mergeProps(style(theme, "brace"), {
        "onClick": () => {
          toggleCollapsed(i);
        },
        "class": "array-group-brace"
      }), [createTextVNode("["), createVNode("div", mergeProps(style(theme, "array-group-meta-data"), {
        "class": "array-group-meta-data"
      }), [createVNode("span", mergeProps({
        "class": "object-size"
      }, style(theme, "object-size")), [i * size, " - ", i * size + size > src2.length ? src2.length - 1 : i * size + size - 1])]), createTextVNode("]")])])]))]);
    };
  }
});
const DEPTH_INCREMENT = 1;
const SINGLE_INDENT = 5;
class JsonVariable {
  constructor(name, value) {
    this.name = name;
    this.value = value;
    this.type = toType(value);
  }
}
const JsonObject = defineComponent({
  name: "Object",
  props: {
    jsvRoot: Boolean,
    src: {
      type: Object,
      required: true
    },
    name: {
      type: [String, Boolean],
      default: ""
    },
    namespace: {
      type: Array,
      required: true
    },
    indexOffset: {
      type: Number,
      default: 0
    },
    type: {
      type: String,
      required: true
    },
    depth: {
      type: Number,
      required: true
    },
    parentType: {
      type: String,
      default: ""
    }
  },
  setup(props) {
    const setting = inject("setting");
    const copyConfig = reactive({
      name: props.name,
      namespace: props.namespace
    });
    provide("copyConfig", copyConfig);
    const state = reactive({
      expanded: void 0,
      hovered: false
    });
    const size = computed(() => {
      return Object.keys(props.src).length;
    });
    const objectType = computed(() => {
      return props.type === "array" ? "array" : "object";
    });
    const expanded = computed({
      get: () => {
        if (state.expanded !== void 0) {
          return state.expanded;
        }
        return (setting.collapsed === false || setting.collapsed !== true && setting.collapsed > props.depth) && (!props.shouldCollapse || props.shouldCollapse({
          name: props.name,
          src: props.src,
          type: toType(props.src),
          namespace: props.namespace
        }) === false) && size.value !== 0;
      },
      set: (val) => {
        state.expanded = val;
      }
    });
    function toggleCollapsed() {
      expanded.value = !expanded.value;
    }
    function getObjectContent(_, src2, contentProps) {
      return createVNode("div", {
        "class": "pushed-content object-container"
      }, [createVNode("div", mergeProps({
        "class": "object-content"
      }, style(setting.theme, "pushed-content")), [renderObjectContents(src2, contentProps)])]);
    }
    function getEllipsis() {
      if (size.value === 0) {
        return null;
      } else {
        return createVNode("div", mergeProps(style(setting.theme, "ellipsis"), {
          "class": "node-ellipsis",
          "onClick": toggleCollapsed
        }), [createTextVNode("...")]);
      }
    }
    function getObjectMetaData(_) {
      return createVNode(VariableMeta, mergeProps({
        "rowHovered": state.hovered,
        "size": size.value
      }, toRaw(props)), null);
    }
    function getBraceStart() {
      const {
        src: src2,
        parentType
      } = props;
      const {
        theme,
        iconStyle
      } = setting;
      if (parentType === "array_group") {
        return createVNode("span", null, [createVNode("span", style(theme, "brace"), [objectType.value === "array" ? "[" : "{"]), expanded.value ? getObjectMetaData() : null]);
      }
      const IconComponent = expanded.value ? ExpandedIcon : CollapsedIcon;
      return createVNode("span", null, [createVNode("span", mergeProps({
        "onClick": toggleCollapsed
      }, style(theme, "brace-row")), [createVNode("div", mergeProps({
        "class": "icon-container"
      }, style(theme, "icon-container")), [createVNode(IconComponent, {
        theme,
        iconStyle
      }, null)]), createVNode(getObjectName, mergeProps({
        "theme": theme,
        "quotesOnKeys": setting.quotesOnKeys
      }, props), null), createVNode("span", style(theme, "brace"), [objectType.value === "array" ? "[" : "{"])]), expanded.value ? getObjectMetaData() : null]);
    }
    function renderObjectContents(variables, contentProps) {
      const elements = [];
      let variable;
      let keys = Object.keys(variables || {});
      if (setting.sortKeys && objectType.value !== "array") {
        keys = keys.sort();
      }
      keys.forEach((name) => {
        variable = new JsonVariable(name, variables[name]);
        if (props.parentType === "array_group" && props.indexOffset) {
          variable.name = parseInt(variable.name) + props.indexOffset;
        }
        if (!variables.hasOwnProperty(name)) {
          return;
        } else if (variable.type === "object") {
          elements.push(createVNode(JsonObject, mergeProps(contentProps, {
            "key": variable.name,
            "depth": props.depth + DEPTH_INCREMENT,
            "name": variable.name,
            "src": variable.value,
            "namespace": props.namespace.concat(variable.name),
            "parentType": objectType.value,
            "type": "object"
          }), null));
        } else if (variable.type === "array") {
          let ObjectComponent = JsonObject;
          if (setting.groupArraysAfterLength && variable.value.length > setting.groupArraysAfterLength) {
            ObjectComponent = ArrayGroup;
          }
          elements.push(createVNode(ObjectComponent, mergeProps(contentProps, {
            "key": variable.name,
            "depth": props.depth + DEPTH_INCREMENT,
            "name": variable.name,
            "src": variable.value,
            "namespace": props.namespace.concat(variable.name),
            "type": "array",
            "parentType": objectType.value
          }), null));
        } else {
          elements.push(createVNode(VariableEditor, mergeProps(contentProps, {
            "key": variable.name + "_" + props.namespace,
            "variable": variable,
            "singleIndent": SINGLE_INDENT,
            "type": props.type
          }), null));
        }
      });
      return elements;
    }
    return () => {
      const styles = {};
      if (!props.jsvRoot && props.parentType !== "array_group") {
        styles.paddingLeft = setting.indentWidth * SINGLE_INDENT;
      } else if (props.parentType === "array_group") {
        styles.borderLeft = 0;
        styles.display = "inline";
      }
      const _a = props, {
        depth,
        src: src2,
        namespace,
        name,
        type,
        parentType,
        jsvRoot
      } = _a, rest = __objRest(_a, [
        "depth",
        "src",
        "namespace",
        "name",
        "type",
        "parentType",
        "jsvRoot"
      ]);
      return createVNode("div", mergeProps({
        "class": "object-key-val",
        "onMouseenter": () => state.hovered = true,
        "onMouseleave": () => state.hovered = false
      }, style(setting.theme, props.jsvRoot ? "jsv-root" : "objectKeyVal", styles)), [getBraceStart(), expanded.value ? getObjectContent(depth, src2, rest) : getEllipsis(), createVNode("span", {
        "class": "brace-row"
      }, [createVNode("span", {
        "style": __spreadProps(__spreadValues({}, style(setting.theme, "brace").style), {
          paddingLeft: expanded.value ? "3px" : "0px"
        })
      }, [objectType.value === "array" ? "]" : "}"]), expanded.value ? null : getObjectMetaData()])]);
    };
  }
});
var JsonObject$1 = JsonObject;
class ParseJSONError {
  constructor(message) {
    this.message = message;
  }
}
var VueJsonView = defineComponent({
  name: "VueJsonView",
  props: {
    theme: {
      type: String,
      default: ""
    },
    src: {
      type: [String, Object],
      required: true
    },
    collapsed: {
      type: [Boolean, Number],
      default: false
    },
    sortKeys: {
      type: Boolean,
      default: false
    },
    name: {
      type: [Boolean, String],
      default: false
    },
    enableClipboard: {
      type: [Boolean, Function],
      default: true
    }
  },
  setup(props) {
    const setting = reactive({
      theme: "monokai",
      collapseStringsAfterLength: false,
      shouldCollapse: false,
      quotesOnKeys: true,
      groupArraysAfterLength: 100,
      indentWidth: 2,
      enableClipboard: props.enableClipboard,
      displayObjectSize: true,
      displayDataTypes: false,
      iconStyle: "triangle",
      defaultValue: null,
      displayArrayKey: true,
      collapsed: false,
      sortKeys: true
    });
    provide("setting", setting);
    const srcRef = computed(() => {
      try {
        if (typeof props.src === "object") {
          return props.src;
        } else {
          return JSON.parse(props.src);
        }
      } catch (error) {
        return new ParseJSONError(error.message || "src\u5FC5\u987B\u662F\u4E00\u4E2AJSON\u6570\u636E");
      }
    });
    const name = computed(() => {
      if (srcRef.value instanceof ParseJSONError) {
        return "ERROR";
      }
      return props.name;
    });
    return () => {
      const propsRaw = __spreadValues({}, toRaw(props));
      delete propsRaw.src;
      if (!propsRaw.theme) {
        delete propsRaw.theme;
      }
      const objectProps = __spreadProps(__spreadValues({}, propsRaw), {
        src: srcRef.value,
        name: name.value,
        namespace: [name.value],
        depth: 0,
        jsvRoot: true,
        type: toType(srcRef.value)
      });
      Object.assign(setting, propsRaw);
      function getObjectComponent() {
        if (srcRef.value === null) {
          return createVNode(JsonNull, null, null);
        }
        if (srcRef.value === void 0) {
          return createVNode(JsonUndefined, null, null);
        }
        let ObjectComponent = JsonObject$1;
        if (Array.isArray(srcRef.value) && setting.groupArraysAfterLength && srcRef.value.length > setting.groupArraysAfterLength) {
          ObjectComponent = ArrayGroup;
        }
        return createVNode(ObjectComponent, objectProps, null);
      }
      return createVNode("div", mergeProps({
        "class": "vue-json-view"
      }, style(setting.theme, "app-container")), [createVNode("div", {
        "class": "pretty-json-container object-container"
      }, [createVNode("div", {
        "class": "object-content"
      }, [getObjectComponent()])])]);
    };
  }
});
export { VueJsonView as default };
